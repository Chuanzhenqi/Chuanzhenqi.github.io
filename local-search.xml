<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Summary7</title>
    <link href="/2024/10/09/Summary7/"/>
    <url>/2024/10/09/Summary7/</url>
    
    <content type="html"><![CDATA[<p>$BU\sim BX$</p><span id="more"></span><h1 id="BU-将军棋"><a href="#BU-将军棋" class="headerlink" title="BU 将军棋"></a><code>BU</code> 将军棋</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：13&#x2F;22 <code>(59.09%) </code>  正确率：13&#x2F;90 <code>(14.44%)</code></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>clay17和clay19在玩generals。</p><p>这款游戏是在一个由$r$行$c$列的网格内进行的。每个格点有几种类型，分别为国王塔，城市，普通格子，山地，沼泽。</p><p>为了方便，本题中不存在山地和沼泽两种地形。</p><p>每个玩家开局只有一个国王塔，有若干士兵，分布在他&#x2F;她已占领的格子上（同一个格子不能同时被多个人占领）。他&#x2F;她需要移动某一格子上的士兵去占领尽可能多的格子，占领某一格子需要至少一个士兵。但占领后格子上也可以没有士兵，且此时依然占领着该格子。玩家需找到所有对手的国王塔，并占领之。若成功占领某一对手的国王塔，则对手死亡，对手当前格子均归该玩家所有，且对手所有格子上的士兵数量都将变为一半，即若当前格子中士兵数量为$x$，被占领后则变为$⌊\frac{x+1}{2}⌋$。若所有对手的国王塔都已被占领，则该玩家在一局游戏中取得胜利。</p><p>若某个人占据了某个格子，该格子的增兵方式为：</p><p><strong>1.若该格子为国王塔，城市或普通格子，在游戏开始后的每$25k$秒开始前，该格子的士兵数量加一。($k$为整数)</strong></p><p><strong>2.若该格子为国王塔或城市，将在游戏开始后的每一秒开始前，该格子的士兵数量加一。</strong></p><p><strong>注意，两种增兵方式互不影响，即在第$25k$秒开始前，国王塔与每个城市都将增加$2$个士兵。</strong></p><p>现在游戏进行到了第$T$秒开始后。满足$T$是$25$的倍数。此时clay19共占据$x_1$个格子（包括国王塔和城市），$y_1−1$个城市，$1$个国王塔，共$z_1$个士兵；</p><p>此时clay17共占据$x_2$个格子（包括国王塔和城市），$y_2−1$个城市，$1$个国王塔，共$z_2$个士兵；</p><p>这时，老师进来了！只见clay19迅速地按下了Ctrl+Win+←；clay17也迅速地按下了Alt+Tab键。两个人的屏幕中出现了 VS code 的界面。上面都写着一段经典的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>老师盯着他们好久好久，总感觉有点不对劲。毕竟，没有哪个人写代码是只用 WASD 键和鼠标的。</p><p>时间一分一秒地流逝，老师没有发现他们的秘密，终于离开了。这时，不太擅长打发育的clay17发现，clay19的士兵数量总和已经比她多了！</p><p>她想知道，clay19第一次比她的士兵总和多的时间是多少。</p><p>也就是说，若clay17和clay19在$T$秒开始后不进行任何操作，你要找到最小的非负整数$x$，使得距离游戏开始的第 $T+x$ 秒开始后，clay19的士兵总和严格大于clay17的士兵总和。如果不存在这样的$x$，请输出$−1$。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行一个整数$n$，表示数据组数。</p><p>接下来$n$行，每一行$6$个整数，分别为$x_1,y_1,z_1,x_2,y_2,z_2$，意义如上所述。</p><p>显然，本题并不需要用到$T$，因为一定有$T$是25的倍数。</p><p>数据保证： $n≤10^5,1≤x_1,y_1,z_1,x_2,y_2,z_2≤10^8$</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>共$n$行，每行一个整数，表示最小的非负整数$x$，若不存在$x$，请输出 $−1$。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">102 </span><span class="hljs-number">3</span> <span class="hljs-number">10</span> <span class="hljs-number">128</span> <span class="hljs-number">2</span> <span class="hljs-number">34</span><br><span class="hljs-symbol">102 </span><span class="hljs-number">3</span> <span class="hljs-number">10</span> <span class="hljs-number">128</span> <span class="hljs-number">2</span> <span class="hljs-number">33</span><br><span class="hljs-symbol">9982 </span><span class="hljs-number">2447</span> <span class="hljs-number">8734</span> <span class="hljs-number">9999</span> <span class="hljs-number">2445</span> <span class="hljs-number">348345</span><br><span class="hljs-symbol">9982 </span><span class="hljs-number">2445</span> <span class="hljs-number">4783</span> <span class="hljs-number">9900</span> <span class="hljs-number">2447</span> <span class="hljs-number">763874</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">100000000</span><br><span class="hljs-symbol">100000000 </span><span class="hljs-number">100000000</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">100000000</span><br></code></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff">0<br><span class="hljs-deletion">-1</span><br>24<br>257271<br>593050<br>2500000000<br>2<br></code></pre></td></tr></table></figure><h2 id="THINK"><a href="#THINK" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>这题先读懂它可能才是最难的部分</p></blockquote><h1 id="BV-只学习，不玩耍，聪明三月也变傻"><a href="#BV-只学习，不玩耍，聪明三月也变傻" class="headerlink" title="BV 只学习，不玩耍，聪明三月也变傻"></a><code>BV</code> 只学习，不玩耍，聪明三月也变傻</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：25&#x2F;120 <code>(20.83%) </code>  正确率：25&#x2F;469 <code>(5.33%)</code></p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>摸鱼摸累了，给大家送一道福利题。</p><p>clay17已经玩腻帝垣琼玉了，她决定去找三月七玩反转棋。</p><p>规则具体如下，现在有一个$n∗n$的棋盘，上面布满了黑白两色棋子。</p><p>每次操作可以选择一枚黑色棋子$A$，记这枚棋子坐标为$(x_0,y_0)$，操作者将把所有$x≤x_0,y≤y_0$的所有棋子进行颜色反转。（即以棋子$A$与$(1,1)$为顶点的矩形区域内，所有颜色反转）。</p><p>clay17与小三月轮流操作，先不能操作者判负。</p><p>由于小三月太可爱了，clay17决定让小三月选择先后手，小三月向你投来了求助的目光，你能帮帮她吗？</p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p>第一行两个数，$n$，$T$。$n$为棋盘大小，$T$为黑色棋子总数。</p><p>接下来$T$行，每行2个数，$x_i，y_i$，表示黑子的坐标。</p><p>数据保证$n≤10^3,T≤10^5,1≤x_i,y_i≤n$。</p><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p>若小三月选择先手可以获得胜利，请输出<code>The Power of Cuteness</code></p><p>若小三月选择后手可以获得胜利，请输出<code>Poder femenino</code></p><h2 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Poder femenino</span><br></code></pre></td></tr></table></figure><p>NOT Hint： 三月七：你不会真以为我傻了吧唧的吧！</p><h3 id="THINK-1"><a href="#THINK-1" class="headerlink" title="THINK"></a>THINK</h3><blockquote><p>无</p></blockquote><h1 id="BW-WC，盒"><a href="#BW-WC，盒" class="headerlink" title="BW WC，盒"></a><code>BW</code> WC，盒</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：6&#x2F;19 <code>(31.58%) </code>  正确率：6&#x2F;60 <code>(10.00%)</code></p><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>由于账号的分数被 SuB 清零了，破防的炸鱼勾们将 SuB 开盒，并决定线下真实他。好在，SuB 有自己的秘密基地，他能躲过炸鱼勾的追杀吗？</p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一条宽为 $n$ ，长为 $m$ 的大街上，SuB 住在大街一头的第 $y$ 个房间里 ，秘密基地在大街另一头的第 $y$ 个房间。</p><p>为了迷惑炸鱼勾，SuB 在逃亡的过程中会时不时地<strong>左右横跳</strong>；并且由于他不喜欢平的（even），他每一步只会向前跨过<strong>奇数（odd）格</strong>。</p><p>最后，SuB 躲进了他的秘密基地，为了基地的隐蔽性，基地大门<strong>6位密码锁</strong>的密码被设置为<strong>路径方案数的后 $6$ 位</strong>。</p><p>炸鱼勾由于长期炸鱼已经变得愚笨，凭他们那可怜的大脑并不能进入 SuB 的秘密基地，于是他们找到了你，希望你能帮助他们解开基地的密码。</p><h2 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h2><p>在一个 $n$ 行 $m$ 列的方格图上，起点为 $(y,1)$ ，终点为 $(y,m)$，从起点向右走任意步，每一步可以从 $(i,j)$ 到达 $(i−1,j+k),(i,j+k),(i+1,j+k)$，其中 $k$ 为奇数。</p><p>方案数指从起点到达终点的所有<strong>不同</strong>走法的数量 $p$ 。</p><p>你应该输出一个<strong>6位</strong>的数字 $p′&#x3D;p\mod 1000000$。</p><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><p>第一行 22 个数 $n$ 和 $m$ ，表示大街的宽度和长度；</p><p>第二行一个数 $y$ ，表示家所在的行号。</p><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><p>一行 1 个数 $p′$ ，表示秘密基地的密码。</p><h2 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">5</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">000013<br></code></pre></td></tr></table></figure><h2 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h2><p>到达第 $5$ 列第 $1\sim n$ 行的方案数分别为 $13,16,10$ 。</p><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><ul><li>对于 $20%$ 的数据，$1≤n≤10$ ， $2≤m≤10$ ；</li><li>对于 $50%$ 的数据，$1≤n≤20$ ， $2≤m≤10^5$ ；</li><li>对于 $100%$ 的数据，$1≤n≤50$ ， $2≤m≤10^18$ ；</li></ul><h2 id="THINK-2"><a href="#THINK-2" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>走地图，上网搜一下，方法还挺多的。先考虑简单的情况，可以知道在步长为1的情况下，可以有选择的打表——也就是动态规划：一个格子的路线数等于能到他的3个格子的路线数之和。遍历整个$n\times m$的数组，就可以得到每个节点的路线数，但是此题步长为$k,k\mod 2 &#x3D; 1,k\in \mathbb{N}$,而其$m$也非常大。仔细观察可知，整个过程中间的每一轮更新中都是一样的，因此可以简化直接计算。所以从左到右，可以把整个过程分成</p></blockquote><h1 id="BX-猜猜数据点"><a href="#BX-猜猜数据点" class="headerlink" title="BX 猜猜数据点"></a><code>BX</code> 猜猜数据点</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：165&#x2F;284 <code>(58.10%) </code>  正确率：165&#x2F;8487 <code>(1.94%)</code></p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>小 H 同学在做编程题时常常想，如果我能知道这道题所有的数据点，就可以面向结果编程了，那该多好！现在他终于有了这样的一个机会，请你来帮帮他实现他的愿望。</p><p>本题共计 10 个数据点，每个数据点的输入都是$[0,10]$ 之间的整数（可能有重复）。对于不为 $0$ 的输入 $x$ ，请输出第 $x$ 个数据点的输入的值；对于为 $0$ 的输入 $x$ ，请依次输出这 10 个数据点的输入的值。</p><h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><p>输入 $x$ 为一个$[0,10]$ 之间的整数。</p><h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><p>当输入 $x$ 不为 $0$ 时，输出包括一行，第一行包括一个整数，表示第 $x$ 个数据点的输入的值；</p><p>当输入 $x$ 为 $0$ 时，输出包括 10 行，每行包括一个整数，第 $i$ 行的整数表示第 $i$ 个数据点的输入的值。</p><h2 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例 1"></a>输入样例 1</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例 1"></a>输出样例 1</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">0<br></code></pre></td></tr></table></figure><h2 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例 2"></a>输入样例 2</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">0<br></code></pre></td></tr></table></figure><h2 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例 2"></a>输出样例 2</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs">2<br>0<br>2<br>4<br>1<br>1<br>4<br>5<br>1<br>4<br></code></pre></td></tr></table></figure><h2 id="样例解释-1"><a href="#样例解释-1" class="headerlink" title="样例解释"></a>样例解释</h2><p>以上样例假设 $10$ 个数据点依次是 $2,0,2,4,1,1,4,5,1,4$ 。</p><h2 id="THINK-3"><a href="#THINK-3" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>这题原本简单，但是不知道为什么当时我脑瘫，没有意识到现实测试点就是它测的点……</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>I 💖 [PUAA]</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Summary6</title>
    <link href="/2024/10/09/Summary6/"/>
    <url>/2024/10/09/Summary6/</url>
    
    <content type="html"><![CDATA[<p>$BO\sim BT$</p><span id="more"></span><h1 id="BO-钓鱼题"><a href="#BO-钓鱼题" class="headerlink" title="BO 钓鱼题"></a><code>BO</code> 钓鱼题</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：470&#x2F;534 <code>(88.01%) </code>  正确率：470&#x2F;895 <code>(52.51%)</code></p><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>Ender_hzEnder_hz 遇到了这样一套钓鱼题，但是他太弱了，于是来请教了<strong>会程设的</strong>你。请你帮他完成这套题目。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Ender_hzEnder_hz 拿到的题目是这样的：</p><ol><li>这道题的答案是：<br><code>A.</code> $A$     <code>B.</code> $B$     <code>C.</code> $C$     <code>D.</code> $D$</li><li>第 55 题的答案是：<br><code>A.</code> $C$     <code>B.</code> $D$     <code>C.</code> $A$     <code>D.</code> $B$</li><li>以下选项中哪一题的答案与其他三项不同：<br><code>A.</code> 第 $3$ 题     <code>B.</code> 第 $6$ 题     <code>C.</code> 第 $2$ 题     <code>D.</code> 第 $4$ 题</li><li>以下选项中哪两题的答案相同：<br><code>A.</code> 第 $1,5$ 题     <code>B.</code> 第 $2,7$ 题     <code>C.</code> 第 $1,9$ 题     <code>D.</code> 第 $6,10$ 题</li><li>以下选项中哪一题的答案与本题相同：<br><code>A.</code> 第 $8$ 题     <code>B.</code> 第 $4$ 题     <code>C.</code> 第 $9$ 题     <code>D.</code> 第 $7$ 题</li><li>以下选项中哪两题的答案与第 88 题相同：<br><code>A.</code> 第 $2,4$ 题     <code>B.</code> 第 $1,6$ 题     <code>C.</code> 第 $3,10$ 题     <code>D.</code> 第 $5,9$ 题</li><li>在此十道题中，被选中次数最少的选项字母为：<br><code>A.</code> $C$     <code>B.</code> $B$     <code>C.</code> $A$     <code>D.</code> $D$</li><li>以下选项中哪一题的答案与第 11 题的答案在字母表中不相邻：<br><code>A.</code> 第 $7$ 题     <code>B.</code> 第 $5$ 题     <code>C.</code> 第 $2$ 题     <code>D.</code> 第 $10$ 题</li><li>已知 ⌈⌈第 $1$ 题和第 $6$ 题的答案相同⌋⌋ 与 ⌈⌈第 XX 题和第 $5$ 题的答案相同⌋⌋ 的真假性相反，那么 XX 为：<br><code>A.</code> $6$     <code>B.</code> $10$     <code>C.</code> $2$     <code>D.</code> $9$</li><li>在此 $10$ 道题中，$ABCD$ 四个字母出现次数最多与最少者的差为：<br><code>A.</code> $3$     <code>B.</code> $2$     <code>C.</code> $4$     <code>D.</code> $1$</li></ol><p>请你用任意方法（抄袭除外）完成这道题并提交答案。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>无</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>一行 $10$ 个大写字母 $a_1a_2…a_{10}$，不含空格，$a_i\in${<code>A</code>,<code>B</code>,<code>C</code>,<code>D</code>}，表示第 $i$ 题的答案。</p><p>注意是你的程序 <strong>输出</strong> 答案，而非直接提交选项！</p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">AAAAAAAAAA</span><br></code></pre></td></tr></table></figure><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><ul><li>输出样例仅供格式参考，不代表真实答案；</li><li>如果你想，可以试试手算；</li><li>如果认为某道题的判断难以实现，可以尝试跳过，最后人工核验。</li></ul><p>Author: Ender_hzEnder_hz.</p><h3 id="Think"><a href="#Think" class="headerlink" title="Think"></a>Think</h3><blockquote><p>网上的一道逻辑题，程序化解决就是对选项节点进行 dfs 暴力搜索</p></blockquote><h1 id="BP-宝石迷阵-Bejeweled"><a href="#BP-宝石迷阵-Bejeweled" class="headerlink" title="BP 宝石迷阵 (Bejeweled)"></a><code>BP</code> 宝石迷阵 (Bejeweled)</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：4&#x2F;31 <code>(12.90%) </code>  正确率：4&#x2F;114 <code>(3.51%)</code></p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>WIKI 最近迷恋上了宝石迷阵, 她给她最好的朋友 NonFriedChips 出了一道题, 做不出来要狠狠惩罚 NonFriedChips</p><p>NonFriedChips 不想被 WIKI 狠狠惩罚, 于是她找到了你, 想让你帮她做出来这道题</p><p>注意, 玩过宝石迷阵并不会帮助理解题意, 请仔细阅读, 该题和普通三消规则并不相同</p><p>现在有 $n$ 个宝石排成一列, 每个宝石有一个颜色 $a$</p><p>每次操作都将进行以下两步</p><ol><li>选择不在最后的一个宝石 $i$, 且有宝石颜色标号 $a_i&#x3D;i$</li><li>消除该宝石及它紧邻后面的一个宝石, 消除之后后面的宝石将会向前移动与前面部分相连</li></ol><p>请求出你最多能操作的次数</p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p>每个测试包含多个测试用例。输入的第一行包含一个整数 $t (1≤t≤100)$ —— 测试用例的数量。每个测试用例的描述如下：</p><p>每个测试用例的第一行包含一个整数 $n (1≤n≤800)$ —— 宝石的数量</p><p>每个测试用例的第二行包含 $n$ 个整数 $a_1,a_2,…,a_n (1≤a_i≤n)$——每个宝石的颜色</p><p>保证所有测试用例中的 $n$ 之和不超过 800</p><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p>对于每个测试用例，输出一个整数 —— 可以执行操作的最大次数。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span><br><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h1 id="BQ-身高问题（concert）"><a href="#BQ-身高问题（concert）" class="headerlink" title="BQ 身高问题（concert）"></a><code>BQ</code> 身高问题（concert）</h1><p>时间限制：1000ms  内存限制：28672kb</p><p>通过率：6&#x2F;21 <code>(28.57%) </code>  正确率：6&#x2F;64 <code>(9.38%)</code></p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>日本演唱会门票的售卖方式是先抽后卖，所以如果想要抢到一个好的位置一定不要忘记参与抽选活动哦！由于位置抽选的方式是随机的，可能会在观看演唱会时出现这种情况：前面的人比后面的人高，导致到后面的看不到小绿毛。</p><p>同一排上的观众是不会相互遮挡的，所以<strong>我们在这里只在意一列长度为 $n$ 的座位</strong>。从舞台向外将座位编号为 1,2,…,n1,2,…,n，且这 $n$ 的人的身高是 1,2,…,n1,2,…,n。如果<strong>位置 $i$ 的人前面有 aa 个比他要高的人，那么他就会产生 aa 点怒气</strong>。对于这 $n$ 个人，一个座位顺序的怒气值 AA 是所有人的<strong>怒气和</strong>，每个人坐到每个位置的<strong>概率是相等的</strong>。你坐在 SVIP 座，所以不参与排座，看着他们生气会产生 kA+A2kA+A2 的惬意（什么资本家。。。）。</p><p>现在你想知道，对于所有可能的座位顺序，你产生的惬意<strong>总和</strong>。答案对 109+7109+7 取模。</p><blockquote><p>简要题意：</p><p>设 PP 为任意一个 1∼n1∼n 的排列，τ(P)τ(P) 为其中的逆序对个数，求（答案对 109+7109+7 取模）</p><p>∑p∈permutation(n)(kτ(P)+τ2(P))∑p∈permutation⁡(n)(kτ(P)+τ2(P))</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>本题为多组数据，第一行为数据组数 TT。</p><p>对于每组数据，一行两个正整数 $n$，kk。意义为题目中所述。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>对于每组数据，一行一个整数。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入 #1"></a>输入 #1</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出 #1"></a>输出 #1</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">40<br></code></pre></td></tr></table></figure><h3 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明&#x2F;提示"></a>说明&#x2F;提示</h3><p>对于 10%10% 的数据：T&#x3D;1,n≤10,k≤2T&#x3D;1,n≤10,k≤2</p><p>对于 30%30% 的数据：T&#x3D;1,n≤100,k≤2T&#x3D;1,n≤100,k≤2</p><p>另外有 5%5% 的数据：n&#x3D;1,k≤1e9n&#x3D;1,k≤1e9</p><p>对于 100%100% 的数据：∑n≤107,T≤106,2≤k≤109∑n≤107,T≤106,2≤k≤109</p><p>对于 0%0% 的数据：∑n≤1012∑n≤1012</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/zc6vpakf.png" alt="img"></p><h1 id="BR-捅似你喵"><a href="#BR-捅似你喵" class="headerlink" title="BR 捅似你喵"></a><code>BR</code> 捅似你喵</h1><p>时间限制：2000ms  内存限制：65536kb</p><p>通过率：3&#x2F;20 <code>(15.00%) </code>  正确率：3&#x2F;53 <code>(5.66%)</code></p><h2 id="题目背景-1"><a href="#题目背景-1" class="headerlink" title="题目背景"></a>题目背景</h2><p>“你吃的是什么喵？分我一点喵？什么，这不是我的分吗喵！不要吃我的分喵！不要吃了喵！捅似你喵！捅似你喵！捅似你喵！”长久地被炸鱼勾折磨，SuB 对炸鱼勾的怨念越来越深了。在一个月黑风高的夜晚，SuB 黑进了游戏的服务器，并锁定了几个炸鱼勾的账号，现在他准备将他们匹配到一起，体会体会掉分的痛苦！</p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>SuB 将炸鱼勾排成了一个 n×mn×m 的矩阵，他每次可以选择将<strong>任意一个子矩阵</strong>中的炸鱼勾分配到一个房间，并且在暗箱操作下，他可以保证每个人都能掉 <strong>1</strong> 分。</p><p>但是，由于段位保护，如果一个炸鱼勾的分数归零，那么他将无法再被匹配进房间，即是说，炸鱼勾的分数<strong>不能为负数</strong>。</p><p>现在，SuB 想知道，他最少需要操作几次，才可以使所有炸鱼勾的分数归零。</p><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><p>第一行两个正整数 $n$ 和 $m$ ；</p><p>接下来 $n$ 行，每行 mm 个正整数 ai,jai,j ，表示炸鱼勾的初始分数。</p><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><p>共一个数，表示 SuB 最少所需的分配次数。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">8<br></code></pre></td></tr></table></figure><h2 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/qutcpefs.png" alt="img"></p><p>如图所示，分别将这四个子矩阵中的炸鱼勾分配到一起各 22 次，即可使所有炸鱼勾的分数归零。</p><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><ul><li>对于 20%20% 的数据， 1≤n,m≤101≤n,m≤10</li><li>对于 60%60% 的数据， 1≤n,m≤1001≤n,m≤100</li><li>对于 100%100% 的数据， 1≤n,m≤200,0≤ai,j≤1061≤n,m≤200,0≤ai,j≤106</li></ul><h2 id="Not-Hint"><a href="#Not-Hint" class="headerlink" title="Not Hint"></a>Not Hint</h2><p>似了喵。。</p><h1 id="BS-Contrasty-Angeles"><a href="#BS-Contrasty-Angeles" class="headerlink" title="BS Contrasty Angeles"></a><code>BS</code> Contrasty Angeles</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：6&#x2F;16 <code>(37.50%) </code>  正确率：6&#x2F;36 <code>(16.67%)</code></p><h2 id="题目背景-2"><a href="#题目背景-2" class="headerlink" title="题目背景"></a>题目背景</h2><p>露薇娅和芦苇鸭是一体两面的好朋友。</p><p>她们住在环形小镇的两端。环形小镇从 11 到 $n$ 顺序编号，共有 $n$ 条双向道路，露薇娅住在 ss，而卤味鸭住在 $t$。</p><p>这天，露薇娅收掉了定数最高的魔王曲「Contrasty Angeles」，想要去和芦苇鸭炫耀一下。</p><p>但是天空依然在下着雨。虽然她并不会被雨淋湿，也不会因为淋雨而陷入梦境，但经过水坑仍是很麻烦的事情。</p><p>于是她把这个问题交给了你，想要知道：假设每个道路的长度在整数区间 [1,m][1,m] 中随机选取且已知，从 ss 到 $t$ 最短路径的长度期望是多少？</p><p>同时，她发现你可能不会分数的模运算，于是她为了让你能够输出整数，你可以输出期望值乘以 mnmn。</p><p>同时由于答案可能非常大，你的答案应该对 109+7109+7 取模。</p><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>与上文题目背景等价。</strong></p><p>给定一个 $n$ 个节点的环，节点依次编号为 1,2,3,⋯,n1,2,3,⋯,n。</p><p>很明显该环有双向边 (1,2),(2,3),(3,4),⋯(n−1,n),(n,1)(1,2),(2,3),(3,4),⋯(n−1,n),(n,1)，共有 $n$ 条边。</p><p>通过这些边可以从一个节点走到相邻的节点上。显然任意两个节点之间可以互相到达。</p><p>给定正整数 $m$，这 $n$ 条边的距离可能在 { 1,2,3,⋯,m−1,m1,2,3,⋯,m−1,m } 中等概率随机选取。</p><p>显然，这 $n$ 条边各有 $m$ 种可能，所以一共有 mnmn 种可能的不同选取方案。</p><p>给定起点 ss 和终点 $t$，求从 ss 到 $t$ 最短路径在这 mnmn 种情况下的和。</p><p>答案对 109+7109+7 取模。</p><h2 id="形式化题面"><a href="#形式化题面" class="headerlink" title="形式化题面"></a>形式化题面</h2><p><strong>与上文题目描述等价。</strong></p><p>我们令从 vv 到 v+1v+1 的边 (v,v+1)(v,v+1) 的长度设为 evev。特别地，边 (n,1)(n,1) 的长度为 enen。</p><p>求：</p><p>answer&#x3D;∑e1&#x3D;1m∑e2&#x3D;1m⋯∑en&#x3D;1mdistance(s,t)mod109+7&#x3D;∑(e1,e2,⋯,en)∈1,2,⋯,mnmin{es+⋯+et−1,et+⋯+en+e1+⋯+es−1}mod109+7answer&#x3D;∑e1&#x3D;1m∑e2&#x3D;1m⋯∑en&#x3D;1mdistance(s,t)mod109+7&#x3D;∑(e1,e2,⋯,en)∈1,2,⋯,mnmin{es+⋯+et−1,et+⋯+en+e1+⋯+es−1}mod109+7</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>共两行，第一行为两个由空格分隔的正整数n,mn,m，第二行为两个由空格分隔的正整数 s,ts,t。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行一个整数，代表答案。</p><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">12<br></code></pre></td></tr></table></figure><h2 id="样例解释-1"><a href="#样例解释-1" class="headerlink" title="样例解释 #1"></a>样例解释 #1</h2><p>这是一个节点数为 33 的环，共 33 条边，每条边长度在{ 1,21,2 } 间随机，共 23&#x3D;823&#x3D;8 种情况。要找的路径从 11 到 22。</p><p>当边 (1,2)(1,2) 长度为 11 时，最短路径长度一定是 11，共 44 种情况。</p><p>当边 (1,2)(1,2) 长度为 22 时，最短路径长度一定是 22，共 44 种情况。</p><p>答案为 1×4+2×4&#x3D;121×4+2×4&#x3D;12。</p><h2 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">272<br></code></pre></td></tr></table></figure><h2 id="样例解释-2"><a href="#样例解释-2" class="headerlink" title="样例解释 #2"></a>样例解释 #2</h2><p>这是一个节点数为 44 的环，共 44 条边，每条边长度在 { 1,2,31,2,3 } 间随机，共 34&#x3D;8134&#x3D;81 种情况。要找的路径从 22 到 44。</p><p>可以发现有两条路可走：A:2→3→4A:2→3→4 或 B:2→1→4B:2→1→4。</p><p>可以证明，路径 A,BA,B 均有 32&#x3D;932&#x3D;9 种可能，长度为 2,3,4,5,62,3,4,5,6 的可能分别为 1,2,3,2,11,2,3,2,1。</p><p>因此，路径 A,BA,B 长度最小值可能是 2,3,4,5,62,3,4,5,6，可能为 17,28,27,8,117,28,27,8,1。</p><p>答案为 2×17+3×28+4×27+5×8+6×1&#x3D;2722×17+3×28+4×27+5×8+6×1&#x3D;272。</p><h2 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入 #3"></a>样例输入 #3</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">8 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出 #3"></a>样例输出 #3</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">11755310</span><br></code></pre></td></tr></table></figure><h2 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入 #4"></a>样例输入 #4</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">40 </span><span class="hljs-number">50</span><br><span class="hljs-symbol">20 </span><span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><h2 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出 #4"></a>样例输出 #4</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">536456982</span><br></code></pre></td></tr></table></figure><h2 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h2><p>对于 30%30% 的数据，n≤5,m≤5,s&#x3D;1,t&#x3D;$n$≤5,m≤5,s&#x3D;1,t&#x3D;n。</p><p>对于 80%80% 的数据，n≤50,m≤50n≤50,m≤50。</p><p>对于 100%100% 的数据，1≤s≤t≤n≤500,m≤5001≤s≤t≤n≤500,m≤500。</p><h2 id="Hint-1"><a href="#Hint-1" class="headerlink" title="Hint"></a>Hint</h2><p>一个方便理解的样例：</p><p>当 n&#x3D;6,s&#x3D;1,t&#x3D;5,e1&#x3D;1,e2&#x3D;2,e3&#x3D;3,e4&#x3D;4,e5&#x3D;5,e6&#x3D;6n&#x3D;6,s&#x3D;1,t&#x3D;5,e1&#x3D;1,e2&#x3D;2,e3&#x3D;3,e4&#x3D;4,e5&#x3D;5,e6&#x3D;6 时：</p><p>从起点 s&#x3D;1s&#x3D;1 到终点 t&#x3D;5t&#x3D;5 的最短路径长度为 1+2+3+4&#x3D;101+2+3+4&#x3D;10。另一条路的长度为 5+6&#x3D;115+6&#x3D;11，不是最短路径。</p><p>哎音游人真的是</p><h1 id="BT-mod-2024"><a href="#BT-mod-2024" class="headerlink" title="BT mod 2024"></a><code>BT</code> mod 2024</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：239&#x2F;364 <code>(65.66%) </code>  正确率：239&#x2F;1068 <code>(22.38%)</code></p><h2 id="题目背景-3"><a href="#题目背景-3" class="headerlink" title="题目背景"></a>题目背景</h2><p>本题由同学供题，助教代为上传</p><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入两个自然数 m,nm,n，求出 $n$ 除以 $m$ 的余数。</p><h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><p>两个自然数 m,nm,n。</p><h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><p>$n$ 除以 $m$ 的余数。</p><h2 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">91<br>1000000000000000000000000<br></code></pre></td></tr></table></figure><h2 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h2 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1≤m≤10^9,0≤n&lt;10^{106}$</p><p>出题人：tb148</p>]]></content>
    
    
    
    <tags>
      
      <tag>I 💖 [PUAA]</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Summary5</title>
    <link href="/2024/10/09/Summary5/"/>
    <url>/2024/10/09/Summary5/</url>
    
    <content type="html"><![CDATA[<p>$BH\sim BN$</p><span id="more"></span><h1 id="BH-clay17与帝垣琼玉"><a href="#BH-clay17与帝垣琼玉" class="headerlink" title="BH clay17与帝垣琼玉"></a><code>BH</code> clay17与帝垣琼玉</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：52&#x2F;72 <code>(72.22%) </code>  正确率：52&#x2F;121 <code>(42.98%)</code></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>clay17闲来无事和青雀一起摸鱼。</p><p>桌面上现有A张“摸鱼牌”和B张“普通牌”， 随机打乱顺序后放在桌面上，开始一张一张地翻牌。</p><p>翻到摸鱼牌，青雀可以安全的摸鱼，快乐指数$+1$；</p><p>翻到普通牌，青雀则会担心这是符玄要来抓自己的不好兆头，快乐指数$−1$。</p><p>青雀最初快乐指数为$0$，并且在翻牌过程中可以随时停止翻牌，青雀在最优策略下平均快乐指数$S$是多少。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>两个数字$A$，$B$（$A,B≤1000$）</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出一行，表示$S$的值，保留两位小数</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.<span class="hljs-number">61</span><br></code></pre></td></tr></table></figure><h2 id="THINK"><a href="#THINK" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>开始直接想错了，他这个最优策略指的是按照当前手中的排来决策是否取下一张牌——果然是个赌徒，没输个精光就不肯罢休。</p><p>然后有意思的是这个决策过程就可以写成二维的动态规划，一个状态$DP[i][j]$由上两个状态$DP[i-1][j]和DP[i][j-1]$概率决定</p></blockquote><h1 id="BI-Sayrafiezadeh-1994"><a href="#BI-Sayrafiezadeh-1994" class="headerlink" title="BI Sayrafiezadeh 1994"></a><code>BI</code> Sayrafiezadeh 1994</h1><p>时间限制：100ms  内存限制：65536kb</p><p>通过率：350&#x2F;523 <code>(66.92%) </code>  正确率：350&#x2F;2455 <code>(14.26%)</code></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>如果一年有 $365365365365365365365365$ 天，那么 $365365365365$ 人的生日互不相同的概率是多少？</p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">365365365365<br>365365365365365365365365<br></code></pre></td></tr></table></figure><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p>将答案保留 6 位小数输出。</p><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>因为输入是固定的，所以你可以自己算出答案后再让提交的程序直接输出你已经算出的答案。</p><p>为什么本题是这个名字呢？真的好奇怪哦！</p><h2 id="THINK-1"><a href="#THINK-1" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>生日问题，还有其他的一些随机事件，和一些概率分布律是密切相关的。这里搜索题目可知一个生日问题的近似公式手算或者计算机都可以Python处理这种问题就比较方便了</p></blockquote><h1 id="BJ-Bubble-sort-2024"><a href="#BJ-Bubble-sort-2024" class="headerlink" title="BJ Bubble-sort 2024"></a><code>BJ</code> Bubble-sort 2024</h1><p>时间限制：100ms  内存限制：65536kb</p><p>通过率：254&#x2F;306 <code>(83.01%) </code>  正确率：254&#x2F;548 <code>(46.35%)</code></p><h2 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h2><p>$365365365365365365365365$ 个不同元素在冒泡排序倒数第 $365365365365$ 轮开始时已经有序的概率是多少？</p><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">365365365365<br>365365365365365365365365<br></code></pre></td></tr></table></figure><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><p>将答案保留 $6$ 位小数输出。</p><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><p>因为输入是固定的，所以你可以自己算出答案后再让提交的程序直接输出你已经算出的答案。</p><p>为什么本题是这个名字呢？真的好奇怪哦！</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>不同教材中冒泡排序的定义不完全相同，而在本题中我们认为 $n$ 个元素的冒泡排序共 $n$ 轮。</p><p>对于 $3$ 个不同元素的冒泡排序，注意到：</p><ul><li>$(1,2,3)$ 在倒数第 $3$ 轮冒泡排序开始时已经有序。</li><li>$(1,2,3)$ 和 $(1,3,2),(2,1,3),(3,1,2)$ 在冒泡排序倒数第 2 轮开始时已经有序。</li><li>$(1,2,3)$ 和 $(1,3,2),(2,1,3),(3,1,2)$及 $(2,3,1),(3,2,1)$ 在冒泡排序倒数第 11 轮开始时已经有序。</li></ul><p>从而 $3$ 个不同元素在冒泡排序倒数第 $x$ 轮开始时已经有序的概率大约是 $\exp(\frac{3x^2-3x}{4x-22})$。</p><table><thead><tr><th align="left">倒数第 $3$ 轮开始时</th><th align="left">倒数第 22 轮开始时</th><th align="left">倒数第 11 轮开始时</th></tr></thead><tbody><tr><td align="left">$(1,2,3)$</td><td align="left">$(1,2,3)$</td><td align="left">$(1,2,3)$</td></tr><tr><td align="left">$(1,3,2)$</td><td align="left">$(1,2,3)$</td><td align="left">$(1,2,3)$</td></tr><tr><td align="left">$(2,1,3)$</td><td align="left">$(1,2,3)$</td><td align="left">$(1,2,3)$</td></tr><tr><td align="left">$(2,3,1)$</td><td align="left">$(2,1,3)$</td><td align="left">$(1,2,3)$</td></tr><tr><td align="left">$(3,1,2)$</td><td align="left">$(1,2,3)$</td><td align="left">$(1,2,3)$</td></tr><tr><td align="left">$(3,2,1)$</td><td align="left">$(2,1,3)$</td><td align="left">$(1,2,3)$</td></tr></tbody></table><h2 id="THINK-2"><a href="#THINK-2" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>其实下面公式都给出来了，上网搜一下也可以找到这个瑞利分布公式</p></blockquote><hr><h1 id="BK-clay17与milkteam"><a href="#BK-clay17与milkteam" class="headerlink" title="BK clay17与milkteam"></a><code>BK</code> clay17与milkteam</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：15&#x2F;35 <code>(42.86%) </code>  正确率：15&#x2F;127 <code>(11.81%)</code></p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>clay17为了喝到新鲜的奶茶，决定建造养牛场。由于她对奶茶的高要求，她决定引入一种新品种牛，由于预算优先，她最多只能引入$n$头新品种奶牛。</p><p>好消息是，这种新品种奶牛可以根据与其他奶牛的位置关系进行快速繁殖。具体来说，若在养牛场的格子A处(坐标为$(x,y)$)，以国际象棋中马的走法能走到的8个格子中，只要有至少4头奶牛，那么A处会在下一秒立即生成一头奶牛。</p><p>经过$$10^{100}$$秒后，奶牛数目将保持不变，即此时若继续有合法的格子，奶牛也不会生成。</p><p>现在，请聪明的你帮帮clay17，编排这$n$头奶牛的位置，使最后场上的奶牛尽可能多。</p><p>clay17也没有特别高的期待，你只需要使最后场上的奶牛数目至少为$⌊\frac{n^2}{10}⌋$，便可以通过测试。</p><h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><p>一个数$n$，保证$n≤1000$</p><h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><p>输出$n$行，每行2个数，第$i$行的两个数，表示最开始第$i$个奶牛的坐标$(x_i,y_i)$</p><p>请你保证你的输出满足不会有两头奶牛出现在同一位置，且$−10^8≤x_i,y_i≤10^8$，且输出均为整数。(奶牛多于$n$头时,clay17只会保留前$n$头)</p><h2 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">10<br></code></pre></td></tr></table></figure><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">9</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="THINK-3"><a href="#THINK-3" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>难点在于理解题目，然后就是对各种摆法计算可能的值</p><ul><li>长条状，必须是两排(两侧都可以)，这样才能最大化复用已有的元素，$l&#x3D;n&#x2F;2,h&#x3D;n&#x2F;2&#x2F;4,sum&#x3D;n+2*(l*h)&#x2F;2&#x3D;n+n^2&#x2F;16$,上限有些差</li><li>然后是十字形（回想高中生物“五点采样法”这是有统计学原理的），4个凹槽可以复用，理论值$l&#x3D;n&#x2F;4,a&#x3D;l&#x2F;\sqrt(2),h&#x3D;a&#x2F;4,S&#x3D;l^2&#x2F;2+l^2&#x2F;4&#x3D;3n^2&#x2F;64$</li><li>$L$形，$l&#x3D;n&#x2F;2&#x2F;2,a&#x3D;\sqrt 2<em>l,h&#x3D;a&#x2F;4,S&#x3D;n^2&#x2F;16+n^2&#x2F;64+2</em>l*l&#x2F;4&#x2F;2&#x3D;9n^2&#x2F;64$</li></ul><p>大于要求的界限，OK</p><p>但是下一题需要$[\frac{n^2}{7}]$这就太接近下限了，可能需要精确计算每个点的摆放位置（时间远大于，不需要考虑）</p></blockquote><h1 id="BL-milkteam与clay17"><a href="#BL-milkteam与clay17" class="headerlink" title="BL milkteam与clay17"></a><code>BL</code> milkteam与clay17</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：5&#x2F;19 <code>(26.32%) </code>  正确率：5&#x2F;41 <code>(12.20%)</code></p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>其它相同，除了</p><blockquote><p>clay17也没有特别高的期待，你只需要使最后场上的奶牛数目至少为$⌊\frac{n^2}{7}⌋$，便可以通过测试。</p></blockquote><h1 id="BM-Find-password"><a href="#BM-Find-password" class="headerlink" title="BM Find password"></a><code>BM</code> Find password</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：4&#x2F;17 <code>(23.53%) </code>  正确率：4&#x2F;45 <code>(8.89%)</code></p><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>Koishi擅自给懒鱼的家门口上了一道锁，现在懒鱼没法回家了。为了回家，懒鱼需要想办法解开这把锁。</p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>具体来说，这把锁上有一列有 $n$ （$1≤n≤10^3$）个滑块，最初处于解锁状态时，第 $i$ 个位置上的滑块标有数字 $i$。Koishi随意打乱了这些滑块之后，锁定了这把锁。此时，第 $i$ 个位置上的滑块标有的数字变成了 $a_i$，此时所有 $a_i$ 恰好组成一个 $1\sim n$ 的排列。</p><p>锁定这把锁之后，你每次可以选择两个位置上的滑块，记其所在位置为 $l,r$（$l&lt;r$），并将其交换，但需要满足两个奇怪的性质：</p><ol><li>至少存在一个被选定的位置 $pos$ 满足，在<strong>最初这把锁锁定的时候</strong>，该位置上的滑块标有的数字为 $pos$。</li><li>在之前的所有操作中，未对<strong>位置</strong>为 $l,r$ 的滑块进行交换。</li></ol><p>当对于所有 $i∈[1,n]$，第 $i$ 个位置上滑块上标有数字 $i$ 时，锁就再次恢复解锁状态，懒鱼就可以回家了。</p><p>然而，由规则可知，这把锁的解锁没有什么试错机会，因此懒鱼希望你能够写一个程序，直接输出正确的操作过程。</p><p>当然，也许实际上这把锁根本没法解锁，此时请你也务必告知懒鱼。</p><h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><p>第一行一个正整数 $n$（$1≤n≤10^3$），表示滑块个数。</p><p>第二行一行 $n$ 个正整数，第 $i$ 个正整数 $a_i$（$1≤a_i≤n$）表示从左到右第 $i$ 个滑块上标有的数字。保证所有的 $a_i$ 恰好组成一个 $1 \sim n$ 的排列。</p><h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><p>若这把锁无法解锁，输出一行一个整数 $−1$。</p><p>否则，第一行输出一个自然数 $k\ (0≤k≤2×10^4)$，表示你接下来会执行的操作个数。可以证明，若这把锁可以解锁，则$ 2×10^4$ 步以内必定能解锁。</p><p>接下来 $k$ 行，每行两个正整数 $l,r$（$1≤l&lt;r≤n$），表示选择交换的两个滑块。</p><h2 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">6</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h2><ol><li>如果一开始满足条件1的位置太少了，那么一定无法还原。但是，实际上你也不需要用到很多位置。</li><li>在样例里，初始状态时，位置2上的数是5，位置5上的数是3，位置3上的数是2。</li></ol><p><em>Author：一只懒懒懒懒懒鱼</em></p><h2 id="THINK-4"><a href="#THINK-4" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>无</p></blockquote><h1 id="BN-J-博弈-game"><a href="#BN-J-博弈-game" class="headerlink" title="BN J 博弈 (game)"></a><code>BN</code> J 博弈 (game)</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：15&#x2F;42 <code>(35.71%) </code>  正确率：15&#x2F;117 <code>(12.82%)</code></p><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>WIKI 和 NonFriedChips 在玩游戏，一开始序列中有 $n$ 个 1 ( $n$ 为偶数)，</p><p>每一轮游戏，wiki 先从序列中取出两个数字 $x,y$ ，然后删掉他们，之后NonFriedChips 要从 $x+y$ 和$|x−y|$ 中选一个添加到序列中。</p><p>当序列中存在有某数大于其他数字之和或者所有数都是 0 时结束游戏。</p><p>结束后序列中每有一个数字 NonFriedChips 就要给 WIKI 一块薯片，WIKI 希望自己拿到的薯片尽可能多， NonFriedChips 希望自己给的薯片尽可能小，两人都采用最优策略的情况下 WIKI 最多能拿到多少薯片？</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个 $t$ 表示游戏轮数</p><p>后面 $t$ 行整数 $n$ 表示每轮游戏开始时 1 的个数</p><h2 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h2><p>$t$ 行整数表示两人在最优策略下 WIKI 最多拿到的薯片</p><h2 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br></code></pre></td></tr></table></figure><h2 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1≤t≤10^4$</p><p>$1≤n≤10^{18}$</p><h2 id="THINK-5"><a href="#THINK-5" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>本题名字就是提示，这是一类博弈游戏</p><p>但这里的关键点是<strong>删两个，添一个</strong>，每一轮如果是奇数则不能完全匹配，导致会余下一个数</p><p>样例给的少，自己构建几个就会发现两个对局者的最优策略是：</p><p>- </p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>I 💖 [PUAA]</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Summary4</title>
    <link href="/2024/10/09/Summary4/"/>
    <url>/2024/10/09/Summary4/</url>
    
    <content type="html"><![CDATA[<p>$BA\sim BH$</p><span id="more"></span><h1 id="BA-咸鱼退休科学"><a href="#BA-咸鱼退休科学" class="headerlink" title="BA 咸鱼退休科学"></a><code>BA</code> 咸鱼退休科学</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：313&#x2F;395 <code>(79.24%) </code>  正确率：313&#x2F;1442 <code>(21.71%)</code></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>21 岁高龄的某咸鱼同学想要退休了！今天，他和男生小M和女生小F一起探讨了自己的退休事宜。</p><p>延迟退休的规则是这样的：从2025年1月1日起，男职工（原法定退休年龄六十岁）和原法定退休年龄为五十五周岁的女职工，法定退休年龄每四个月延迟一个月，分别逐步延迟至六十三周岁和五十八周岁。</p><p>如果你感受到上面的规则有些抽象，你可以从 <a href="https://www.gov.cn/yaowen/liebiao/202409/content_6974294.htm">这里</a> 获得更多的样例。</p><p>男生小M和原本五十五岁退休的女生小F想知道自己经过调整后会在哪一年哪一月退休。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p><strong>多组数据输入</strong></p><p>每组数据一行，格式为 <code>yyyy mm X</code>，含义如下：</p><p><code>yyyy</code> 为年份，保证 $1900≤yyyy≤2024$；</p><p><code>mm</code> 为月份，保证 $1≤mm≤12$，月份有前导零；</p><p><code>X</code> 为性别，保证为 <code>M</code> （男性）或 <code>F</code> （女性）的一种；</p><p>本题数据中的女性均为原本五十五岁退休的女性。</p><p>保证数据组数少于 $10000$ 组。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>对于每组数据，输出一行，格式为 <code>yyyy mm</code>，即退休年月。月份为两位数，输出前导零。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1973 </span><span class="hljs-number">06</span> F<br><span class="hljs-symbol">1952 </span><span class="hljs-number">10</span> M<br><span class="hljs-symbol">1966 </span><span class="hljs-number">12</span> M<br><span class="hljs-symbol">2003 </span><span class="hljs-number">08</span> F<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2029 </span><span class="hljs-number">05</span><br><span class="hljs-symbol">2012 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">2027 </span><span class="hljs-number">06</span><br><span class="hljs-symbol">2061 </span><span class="hljs-number">08</span><br></code></pre></td></tr></table></figure><h2 id="THINK"><a href="#THINK" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>看到这题不得不说中国的老龄化已经严重到这种程度了……心忧国家，能做些什么呢？</p><p>最简单的思路就是看题意直接下手，但是点击这里之后有一张具体的延期表，这对数据分析当然就方便很多了</p></blockquote><h1 id="BB-s7h-的邪恶计划"><a href="#BB-s7h-的邪恶计划" class="headerlink" title="BB s7h 的邪恶计划"></a><code>BB</code> s7h 的邪恶计划</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：36&#x2F;100 <code>(36.00%) </code>  正确率：36&#x2F;324 <code>(11.11%)</code></p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>你说得对，但是 BUAA是一款全新 VR 开放世界游戏，在 BUAA 的世界中，玩家将扮演名为 BUAAer 的神秘角色，在大学生活中邂逅性格各异的同学们，和他们一起战胜一一个学科，逐步发掘 毕业 的真相。</p></blockquote><p>作为这款游戏的大boss，邪恶的 s7h 可不想让玩家们这么容易的通关。</p><p>在 BUAA 中，每个 BUAAer 需要学习 $n$ 个学科，每个学科有 $\frac{a_i}{100}$ 的几率挂科。</p><p>作为 BUAA 阻挠玩家通关的幕后黑手之一，s7h 具有一项超能力，他可以任选一个 $i (1≤i&lt;n,a_i&gt;0,a_i+1&lt;100)$，使 $a_i$ 变为 $a_i-1$ ，使$a_{i+1}$ 变成 $a_{i+1}+1$。</p><p>s7h 具有无限的魔力，可以进行任意次的操作，现在他想知道，经过这样的操作后，BUAA 的学生挂掉<strong>所有</strong>学科的最大概率是多少。</p><p>请计算 该概率乘以 $100^n$ 后的值，答案对 $998244353$ 取模。</p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p>第一个数为学科总数 $n$。</p><p>接下来一行，输入 $n$ 个正整数，第 i 个数代表 $a_i$ 的值 ( 保证 $0≤a_i≤100,n≤100$ )。</p><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p>一个整数，代表BUAAer挂掉所有学科的概率乘以 $100^n$后的值，答案对 $998244353$ 取模。</p><h2 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">36<br></code></pre></td></tr></table></figure><p><strong>样例解释:</strong></p><p>经过多次操作后可以把数列变为 <code>2 2 3 3</code> ，此时应挂掉所有学科 的概率乘以 $100^4$ 为 $36$ 。</p><p>可以证明样例没有更优解。</p><p>PS：</p><p>请有竞赛基础的同学思考：如果本题的数据范围改为 $n\le 2\times 10^5$ ，该如何解决本问题。</p><h2 id="THINK-1"><a href="#THINK-1" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>简单分析，题目是要求改变后的$\Pi_{i&#x3D;1}^n a’_i$ 的最大值，由均值不等式（柯西不等式，向量不等式）可知，当$a’_i$ 的方差$D(x)$最小的时候，函数到达最大值，而$a’_i$的状态又是由初始序列和操作决定的（可以说成是一个有限状态机，也可以说是一个线性空间上的向量变化）仔细分析操作$\Gamma(i)$可知，它只能使前面的数减小，后面的数增加。如果要向者均值不等式靠近，则最终结果是尽量形成一个变化比较平缓的递增的序列，此时求连乘就是最大值</p><details>    <summary>八卦</summary>    开局“BUAA是一个开放世界游戏”，这好像在哪里听说过，但却想不起来了</details></blockquote><h1 id="BC-超级数组加密国庆版"><a href="#BC-超级数组加密国庆版" class="headerlink" title="BC 超级数组加密国庆版"></a><code>BC</code> 超级数组加密国庆版</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：201&#x2F;218 <code>(92.20%) </code>  正确率：201&#x2F;314 <code>(64.01%)</code></p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一串长度为 $n$ 的数 $a_1,a_2,⋯,a_n$，$0≤a_i≤108$，它们组成一个数组。出于某种原因，Gino 想把这个数组加密，于是他找来三位操作员，让他们分别将原数组 $a$ 按照以下方式<strong>加密数组任意正整数次</strong>：</p><ul><li>任选一个数字 $i$，$2≤i≤n−1$，将 $a_i$ 加上 2，将 $a_i−1$ 和 $a_i+1$ 都减去 1</li></ul><p>可是，其中一位操作员听错了 Gino 的要求，他会按照这个方式来<strong>加密数组任意正整数次</strong>：</p><ul><li>任选一个数字 $i$，$2≤i≤n−2$，将 $a_i$ 加上 $3$，将 $a_{i-1}$ 减去 $2$，将 $a_{i+1}$ 减去 $1$</li></ul><p>请你根据三位操作员加密完毕后得到的数组，判断是哪位操作员听错了要求，使用错误的方法加密了数组，并计算出他进行了多少次的错误操作？</p><p>注意你并不需要求出另外两名操作员的操作次数。</p><p>数据保证三位操作员都进行了不少于 1 次操作，不多于 $10^8$ 次操作。</p><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><p>第一行一个正整数 $t$，代表数据组数，$1≤t≤10^4$。</p><p>对于每组数据，第一行一个正整数 $n$，代表数组长度，$5≤n≤10^5$。</p><p>接下来三行，每行 $n$ 个整数 $a_1,a_2,⋯a_n$，$−9×10^8≤a_i≤9×10^8$，代表三位操作员分别完成加密操作后得到的三个加密后数组。</p><p>数据保证 $\sum n\le 3\times 10^5$，即所有数据的 $n$ 的总和不超过 $1\times 10^5$。</p><p>数据保证，三位操作员得出的数组是由同一个原始数组通过以上操作得到的。</p><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><p>对于每组数据，输出一行两个正整数 $k,m$，含义为第 $k$ 位操作员听错了 Gino 的要求，使用了错误的方法加密数组，而他操作了 $m$ 次。</p><h2 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">2<br>5<br>0<span class="hljs-number"> 4 </span>2<span class="hljs-number"> 4 </span>5<br>0<span class="hljs-number"> 3 </span>4<span class="hljs-number"> 3 </span>5<br>1<span class="hljs-number"> 0 </span>6<span class="hljs-number"> 3 </span>5<br>5<br>0<span class="hljs-number"> 3 </span>0<span class="hljs-number"> 1 </span>1<br>-1<span class="hljs-number"> 2 </span>3<span class="hljs-number"> 0 </span>1<br>0<span class="hljs-number"> 3 </span>-1<span class="hljs-number"> 3 </span>0<br></code></pre></td></tr></table></figure><h2 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h2><p>对于第一组样例，原始数组为 ${1,2,3,4,5}$，操作员 1 正确加密了 $1$ 次，操作员 2 正确加密了 $2$ 次，操作员 3 错误加密了 $1$ 次。</p><p>对于第二组样例，原始数组为${1,1,1,1,1}$，操作员 1 正确加密了 $1$ 次，操作员 2 错误加密了 $2$ 次，操作员 3 正确加密了 $2$ 次。</p><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>本题改编自《程序设计基础（信息类）》的「数组加密」，需要提示的同学请向助教索要「数组加密」的题解。</strong></p><hr><p><em>Author: Gino, Saisyc</em></p><h2 id="THINK-2"><a href="#THINK-2" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>观察一个操作$\Gamma(i)$对于序列的影响，正常的操作使得前后之和为0，而错误的操作使得操作前后多一个树或者笑少一个数。比较三个序列的和就可以方便地知道谁听错了，而且还能算出听错的人操作了多少步——思考：能推导出正确的操作员操作了多少步吗？</p></blockquote><h1 id="BD-算数天书与祖龙神殿国庆版"><a href="#BD-算数天书与祖龙神殿国庆版" class="headerlink" title="BD 算数天书与祖龙神殿国庆版"></a><code>BD</code> 算数天书与祖龙神殿国庆版</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：6&#x2F;16 <code>(37.50%) </code>  正确率：6&#x2F;94 <code>(6.38%)</code></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>算数天书推演万物，其中的每一卷都分为青龙篇、白虎篇、朱雀篇、玄武篇，满足如下推演规则：</p><ul><li>对于算数天书每一卷的青龙篇，将其中的每一个 <code>+</code> 都分别替换为 <code>*</code>，就能得到这一卷的白虎篇。</li><li>对于算数天书每一卷的白虎篇，将其中的每一个 <code>-</code> 都分别替换为 <code>/</code>，就能得到这一卷的朱雀篇。</li><li>对于算数天书每一卷的朱雀篇，将其中的每一个 <code>*</code> 都分别替换为 <code>+-</code>，就能得到这一卷的玄武篇。</li><li>对于算数天书每一卷的玄武篇，将其中的每一个 <code>/</code> 都分别替换为 <code>+</code>，就能得到下一卷的青龙篇。</li></ul><p>算数天书的第 11 卷的青龙篇、白虎篇、朱雀篇、玄武篇分别是 <code>+</code>、<code>*</code>、<code>*</code>、<code>+-</code> 。</p><p>祖龙神殿充满机缘，其中的每一个传送阵都会通往一个祖龙秘境。对于任意正整数 $p$，想要灵力值为 $p$ 祖龙秘境中的祖龙传承，在这个秘境中向祖龙供奉的灵石的数量必须等于算数天书第 $p+1$ 卷青龙篇前 $p−1$ 个字符中中的 <code>+</code> 的数量。</p><p>注意，由于空间法术会受到天道的限制，对于任意正整数 $q$，祖龙神殿的第 $q$ 个传送阵通往的祖龙秘境的灵力值为 $r^q \mod 2^{32}$ 。</p><h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><p>一个空格隔开的二个不大于 $10^8$ 的正整数 $r,n$ 。</p><h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><p>一个自然数，表示获得祖龙神殿的前 $n$ 个传送阵通往的祖龙秘境的全部祖龙传承所需的灵石的总数量。</p><h2 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例 1"></a>输入样例 1</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">31 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例 1"></a>输出样例 1</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">19<br></code></pre></td></tr></table></figure><h2 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例 2"></a>输入样例 2</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">13 </span><span class="hljs-number">31</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例 2"></a>输出样例 2</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">31944950506</span><br></code></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><p>当 $r&#x3D;31$ 时，祖龙神殿的第 1 个传送阵通往灵力值为 $31$ 的祖龙秘境，想要获得灵力值为 $31$ 的祖龙秘境中的祖龙传承，就必须向祖龙供奉恰好 $19$ 块灵石。</p><p>想要获得灵力值为 $1$ 的祖龙秘境中的祖龙传承，就必须向祖龙供奉恰好 $0$ 块灵石。</p><p>想要获得灵力值为 $2$ 的祖龙秘境中的祖龙传承，就必须向祖龙供奉恰好 $1$ 块灵石。</p><p>想要获得灵力值为 $3$ 的祖龙秘境中的祖龙传承，就必须向祖龙供奉恰好 $1$ 块灵石。</p><p>想要获得灵力值为 $4$ 的祖龙秘境中的祖龙传承，就必须向祖龙供奉恰好 $2$ 块灵石。</p><p>想要获得灵力值为 $5$ 的祖龙秘境中的祖龙传承，就必须向祖龙供奉恰好 $3$ 块灵石。</p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>真的可以不使用浮点数哦！</p><p>想想为什么 $⌊\frac{3}{5}×31⌋≠19&#x3D;⌊\frac{8}{13}×31⌋&#x3D;⌊\frac{21}{34}×31⌋$吧！</p><h2 id="THINK-3"><a href="#THINK-3" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>此题迭代规律比较好找，4元循环，青龙卷每加一卷就是将上一卷的<code>+</code>替换成<code>+-</code>，将<code>-</code>替换成<code>+</code>。但是数据值巨大，必然不是由迭代计算出来的，显然是没有找对规律，一直把这题搁置到了结束——存属于拖延症了</p></blockquote><h1 id="BE-Deadline-的艺术（进阶版）"><a href="#BE-Deadline-的艺术（进阶版）" class="headerlink" title="BE Deadline 的艺术（进阶版）"></a><code>BE</code> Deadline 的艺术（进阶版）</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：59&#x2F;102 <code>(57.84%) </code>  正确率：59&#x2F;312 <code>(18.91%)</code></p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>经过一段时间的学习，熊大现在已经可以接受更加复杂的 ddl 了。现在的 ddl 不仅仅是一个月内的了，还有可能是许多年以后的 ddl……</p><p>此外，因为熊大计组学疯了，他忘记了一些 ddl。其中有些 ddl 他是不记得日期了，却记得该 ddl 还剩多少天；有些 ddl 他记错了，该日期是不合法的；还有一些是完全忘记了，那就没办法了……</p><p>现在熊大想在不同时间来问你关于他的 ddl 的事情……</p><h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><p>第一行一个正整数 $T$，表示有 $T$ 组数据，每组表示一次询问。 接下来 $T$ 行，每行 $2$ 到 $3$ 个非负整数 $a,b,c$，分别以一个空格分隔。 第一个非负整数 $a$ 固定为 <code>8</code> 位，表示当前的日期，格式为 <code>YYYYMMDD</code>。 第二个非负整数 $b$ 只可能是 <code>0,1,2</code> 中的一个，对应题目描述中的三种情况。</p><ul><li>若 $b$ 为 <code>0</code>，则第三个非负整数 $c$ 表示该 ddl 距离当前日期有多少天。</li><li>若 $b$ 为 <code>1</code>，则第三个非负整数 $c$ 固定为 <code>8</code> 位，表示 ddl 的日期，格式同第一个整数。</li><li>若 $b$ 为 <code>2</code>，则**没有第三个非负整数 $c$**。</li></ul><p>保证 $1≤T≤1000,b∈{0,1,2}$。 保证 $a$ 所表示的日期一定合法。当 $c$ 表示日期时，保证 $c$ 晚于 $a$，但不保证 $c$ 表示的日期一定合法。 当 $c$ 表示该 ddl 距离当前日期有多少天时，保证 $c$ 在 <code>int</code> 非负范围内。</p><p><strong>对于题目中涉及到的所有的日期，均保证不早于 1600 年 1 月 1 日，不晚于 9999 年 12 月 31 日。</strong></p><h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><p>对于每组数据，输出一行数据，按照如下格式。 对于输入的 $b$：</p><ul><li>若 $b$ 为 <code>0</code>，则输出该 ddl 的正确日期，格式为 <code>YYYY-MM-DD</code>。</li><li>若 $b$ 为 <code>1</code>，则对该 ddl 的日期进行判断。<ul><li>若输入的日期 $c$ 不合法，则输出 <code>WR0NG DATE!!!</code>。</li><li>若输入的日期 $c$ 合法，则输出一个整数 $d$，表示该 ddl 距离当前日期有多少天。</li></ul></li><li>若 $b$ 为 <code>2</code>，则输出 <code>qwq</code>。</li></ul><h2 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">20240919 </span><span class="hljs-number">0</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">20240818 </span><span class="hljs-number">1</span> <span class="hljs-number">20240919</span><br><span class="hljs-symbol">20240717 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">20240616 </span><span class="hljs-number">1</span> <span class="hljs-number">20250229</span><br><span class="hljs-symbol">20240515 </span><span class="hljs-number">0</span> <span class="hljs-number">365</span><br></code></pre></td></tr></table></figure><h2 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2024</span>-<span class="hljs-number">09</span>-<span class="hljs-number">29</span><br><span class="hljs-attribute">32</span><br><span class="hljs-attribute">qwq</span><br><span class="hljs-attribute">WR0NG</span> DATE!!!<br><span class="hljs-attribute">2025</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span><br></code></pre></td></tr></table></figure><h2 id="样例解释与提示"><a href="#样例解释与提示" class="headerlink" title="样例解释与提示"></a>样例解释与提示</h2><p>输入共 5 组数据。</p><ul><li>第一组数据，自 2024 年 9 月 19 日，10 天后的日期为 2024 年 9 月 29 日。</li><li>第二组数据，自 2024 年 8 月 18 日至 2024 年 9 月 19 日，距离有 32 天。</li><li>第三组数据，输入的 $b$ 为 <code>2</code>，输出 <code>qwq</code>。</li><li>第四组数据，因为 2025 年 2 月 29 日不是一个合法日期，所以输出 <code>WR0NG DATE!!!</code>。注意是 <code>WR0NG</code> 不是 <code>WRONG</code>。</li><li>第五组数据，自 2024 年 5 月 15 日，365 天后的日期为 2025 年 5 月 15 日。</li></ul><h2 id="THINK-4"><a href="#THINK-4" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>该程序实质就是日期判断和加减，但是我就算是复用年月正确性判断代码和调用 <code>Unix</code> 时间戳来计算日期差也过不了，没明白它的关键点在什么地方……</p></blockquote><h1 id="BF-蟹堡王的迷宫"><a href="#BF-蟹堡王的迷宫" class="headerlink" title="BF 蟹堡王的迷宫"></a><code>BF</code> 蟹堡王的迷宫</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：196&#x2F;335 <code>(58.51%) </code>  正确率：196&#x2F;3842 <code>(5.10%)</code></p><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>蟹老板要出差了，但他到达机场时突然发现忘了带钱包，只好安排海绵宝宝去蟹堡王帮他拿回来，接下来请你通过输出 <code>W</code>&#x2F;&#x2F;<code>S</code>&#x2F;&#x2F;<code>A</code>&#x2F;&#x2F;<code>D</code> ，控制海绵宝宝 上&#x2F;&#x2F;下&#x2F;&#x2F;左&#x2F;&#x2F;右 移动，勇闯蟹堡王迷宫，取出蟹老板的钱包。</p><p>注意 “取出”，也就是说既要取到钱包，又要离开蟹堡王。</p><h2 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h2><p>好像没有输入~（迷宫怎么会在输入里，当然是在蟹堡王了！）</p><h2 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h2><p>一行字符串，为你控制海绵宝宝移动的指令（真的只有这些了吗？），长度不超过 $107$。</p><h2 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">DWWDDA</span><br></code></pre></td></tr></table></figure><h2 id="HINT-1"><a href="#HINT-1" class="headerlink" title="HINT 1"></a>HINT 1</h2><ul><li><code>#</code> 表示墙壁</li><li><code>$</code> 表示蟹老板的钱包</li><li><code>@</code> 表示海绵宝宝</li><li><code>?</code> 表示待探索的未知区域</li></ul><h2 id="HINT-2"><a href="#HINT-2" class="headerlink" title="HINT 2"></a>HINT 2</h2><p><strong>如果实在不知道怎么办就先输出样例试试叭~</strong></p><p>还记得助教们教过的怎么 <strong>在 “我的提交” 里查看具体评测信息</strong> 吗？如果你觉得评测信息太乱，<strong>右键点击</strong> 你的评测信息然后 <strong>检查</strong> 就能看到原貌啦~</p><p>本题改编自 20242024 年洛谷愚人节比赛 <code>E</code> 题。</p><h2 id="THINK-5"><a href="#THINK-5" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>题目的确很新颖，刚开始没看懂，因为没有开 <code>dev</code> 窗口查看<code>html</code>源码——败</p><p>诚如 $\text{HINT}$所说，先看原题，多查找资料，一步一步来应该是能解决的</p></blockquote><h1 id="BG-阻止-sigmoid114！"><a href="#BG-阻止-sigmoid114！" class="headerlink" title="BG 阻止 sigmoid114！"></a><code>BG</code> 阻止 sigmoid114！</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：8&#x2F;31 <code>(25.81%) </code>  正确率：8&#x2F;73 <code>(10.96%)</code></p><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>什么，sigmoid114 要去开启疯狂做题模式了吗？不，你必须要阻止他。</p><p>现在你召集了 $n$ 名同学，每名同学都有一个属性值，你可以让他们<strong>按照你需要的某种顺序</strong>站在 sigmoid114 面前的 $n$ 个位置，从而起到阻挡作用。假设第 $i$ 个位置同学的属性值为 $a_i$ 。</p><p>每个位置都会产生一个阻力，<strong>第 $i$ 个位置的阻力</strong> $f(i)$ 由前 $i$ 个位置的同学决定，大小为 $f(i)&#x3D;gcd(a1,a2,…,ai)$，也就是前 $i$ 名同学属性值的<strong>最大公因数</strong>，特别地，$f(1)&#x3D;a_1$。</p><p>那么 sigmoid114 受到的<strong>总阻力</strong>为：<br>$$<br>F&#x3D;\sum_{i&#x3D;1}^n f(i)<br>$$<br>你需要确定某种顺序从而<strong>最大化</strong> $F$ ，请你求出这个最大值。</p><p>快来个人阻止 sigmoid114 啊！</p><h2 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h2><p>第一行一个不超过 $10^6$ 的正整数 $n$。</p><p>第二行 $n$ 个不超过 $10^6$ 的正整数，分别表示 $n$ 名同学的属性值。</p><h2 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h2><p>一个数 $F$ 。</p><h2 id="输入样例-1-1"><a href="#输入样例-1-1" class="headerlink" title="输入样例 1"></a>输入样例 1</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-1-1"><a href="#输出样例-1-1" class="headerlink" title="输出样例 1"></a>输出样例 1</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">8<br></code></pre></td></tr></table></figure><h2 id="输入样例-2-1"><a href="#输入样例-2-1" class="headerlink" title="输入样例 2"></a>输入样例 2</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">6</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-2-1"><a href="#输出样例-2-1" class="headerlink" title="输出样例 2"></a>输出样例 2</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">12<br></code></pre></td></tr></table></figure><h2 id="样例解释-1"><a href="#样例解释-1" class="headerlink" title="样例解释"></a>样例解释</h2><p>样例 1 可以重排为 $4,2,2$ ，此时 $f(1)&#x3D;4,f(2)&#x3D;\gcd(4,2)&#x3D;2,f(3)&#x3D;\gcd(4,2,2)&#x3D;2$ ，故阻力为 $F&#x3D;4+2+2&#x3D;8$ ，并且没有别的排列方式比这个更大。</p><p><em>Author: sigmoid114</em></p><h3 id="Think"><a href="#Think" class="headerlink" title="Think"></a>Think</h3><blockquote><p>没有思路的一集</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>I 💖 [PUAA]</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Summary3</title>
    <link href="/2024/10/09/Summary3/"/>
    <url>/2024/10/09/Summary3/</url>
    
    <content type="html"><![CDATA[<p>$U\sim Z$</p><span id="more"></span><h1 id="U-国庆-朝日的括号序列"><a href="#U-国庆-朝日的括号序列" class="headerlink" title="U 国庆-朝日的括号序列"></a><code>U</code> 国庆-朝日的括号序列</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：40&#x2F;91 <code>(43.96%) </code>  正确率：40&#x2F;298 <code>(13.42%)</code></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Asahi 在你的电脑键盘上按了若干次 <code>(</code> 和 <code>)</code> ，在屏幕上打出了一段括号序列。</p><p>众所周知，按下 <code>(</code> 和 <code>)</code> 时，电脑会根据光标 <code>|</code> 的位置生成括号。光标的移动只能通过按 <code>(</code> 和 <code>)</code> 实现。具体规则如下：</p><p>按下 <code>(</code> 时，光标 <code>|</code> 的左侧和右侧会各自添加一个 <code>(</code> 和 <code>)</code> 。举个例子，屏幕上显示 <code>(|)</code> 时按下 <code>(</code> ，屏幕会显示 <code>((|))</code> 。</p><p>按下 <code>)</code> 时，有两种情况：</p><ol><li>屏幕上光标 <code>|</code> 的右侧是 <code>)</code> 时，光标向右移动一格。如显示<code>(|)</code> 时按下 <code>)</code> ，屏幕会显示 <code>()|</code> 。</li><li>屏幕上光标 <code>|</code> 的右侧是 <code>(</code> 或空白时，会在光标左侧添加一个 <code>)</code> 。如显示<code>()|</code> 时按下 <code>)</code> ，屏幕会显示 <code>())|</code> 。</li></ol><p>Asahi 输入括号序列后，打印下来后交给了你，然后就去河边捡石头了。注意打印后的括号序列是没有光标 <code>|</code> 的。你很好奇 Asahi 是怎么打出来的。请你给出一个程序，找出 Asahi 可能的最短输入序列。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>一行，一个仅包含 <code>(</code> 和 <code>)</code> 的字符串 $S$ ，表示 Asahi 给你的括号序列。$(1≤|S|≤10^6)$</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>一行，符合要求的最短输入序列 TT ；若不存在则输出 <code>Asahi??</code> 。</p><h2 id="输入样例（1）"><a href="#输入样例（1）" class="headerlink" title="输入样例（1）"></a>输入样例（1）</h2><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">((()))<br></code></pre></td></tr></table></figure><h2 id="输出样例（1）"><a href="#输出样例（1）" class="headerlink" title="输出样例（1）"></a>输出样例（1）</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">(((<br></code></pre></td></tr></table></figure><h2 id="输入样例（2）"><a href="#输入样例（2）" class="headerlink" title="输入样例（2）"></a>输入样例（2）</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">(<br></code></pre></td></tr></table></figure><h2 id="输出样例（2）"><a href="#输出样例（2）" class="headerlink" title="输出样例（2）"></a>输出样例（2）</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">Asahi??<br></code></pre></td></tr></table></figure><h2 id="输入样例（3）"><a href="#输入样例（3）" class="headerlink" title="输入样例（3）"></a>输入样例（3）</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">)))<span class="hljs-comment">()</span><br></code></pre></td></tr></table></figure><h2 id="输出样例（3）"><a href="#输出样例（3）" class="headerlink" title="输出样例（3）"></a>输出样例（3）</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">)))(<br></code></pre></td></tr></table></figure><h2 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h2><p>样例（1）的输入序列也可以为 <code>((()</code> 、 <code>((())</code> 、<code>((()))</code> 等等，都符合条件，最短的是 <code>(((</code> 。</p><p>author:Layn</p><blockquote><p>这题自己打几个样例来就比较清晰了，主要是理解题意和分析所有可能的情况,需要注意的就是</p><ul><li>左括号一定会有有括号匹配</li><li>右端若有未能匹配的右括号，左侧的所有括号一定会被敲出来，</li><li>光标移动只能通过敲括号</li></ul></blockquote><h1 id="V-查重红线"><a href="#V-查重红线" class="headerlink" title="V 查重红线 !"></a><code>V</code> 查重红线 !</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：32&#x2F;88 <code>(36.36%) </code>  正确率：32&#x2F;936 <code>(3.42%)</code></p><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>⌈⌈ 御坂美琴 ⌋⌋ 正在学习 C 语言，她实在想不到这些题应该怎么写，于是她通过意念获取到了 ⌈⌈ 初春饰利 ⌋⌋ 一份已经 $\text{AC}$ 了的代码，但一想到有被查重的风险，她决定修改一下再提交上去。</p><p>这份代码一共有 $n$ 个语句，查重红线是 $m$ 个语句，也就是如果她提交的代码与 ⌈⌈ 初春饰利 ⌋⌋ 的代码有 $x$ 个语句不同，当 $x\le m$ 的时候会触发 1 次预警。</p><ul><li>$x&#x3D;0$ 的时候一定会触发预警，$x&gt;n$ 的时候一定不会触发预警。</li><li>预警次数达到 $3$ 次就算作抄袭，成绩清零！</li><li>如果提交次数超过 $[\sqrt{2n}]$，就会被助教注意到并人工查重，同样会被发现抄袭，成绩清零！（其中 $[\ ]$ 表示四舍五入取整）</li></ul><p>现在她想要通过多次试探性提交的方式，在成绩不被清零的前提下，猜出 $m$ 的值究竟是多少，你能帮帮她嘛？</p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>我们已经帮你实现好了两个函数 <code>submit(x)</code> 和 <code>guess(x)</code>，请你利用这两个函数帮她猜出 $m$ 的值。如果在 <strong>成绩不被清零</strong> 的前提下猜对了，你就能够 <code>AC</code> 本题，否则不能。</p><ul><li><code>submit(x)</code> 表示你提交了一份有 <code>x</code> 个语句不同的代码，可以调用不超过 $[\sqrt{2n}]$ 次。其返回值为本次提交的查重结果。</li><li><code>guess(x)</code> 表示你最终猜测 $m$ 的值为 <code>x</code>，只能调用 $1$ 次，调用后我们会立即结束你的程序并判断是否猜测正确。这个函数没有返回值。</li></ul><p>这两个函数的参数 $x$ 必须是一个 <code>int</code> 型变量，变量名不必为 $x$。</p><p><code>submit(x)</code> 的返回值是 <code>int</code> 类型，其返回值含义如下：</p><table><thead><tr><th align="left">返回值</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>1</code></td><td align="left">本次提交触发了预警</td></tr><tr><td align="left"><code>0</code></td><td align="left">本次提交未触发预警</td></tr><tr><td align="left"><code>-1</code></td><td align="left">成绩被清零（预警次数达到了 3 次，或提交次数超过了$\sqrt{2n}$）</td></tr></tbody></table><h2 id="NOT-HINT"><a href="#NOT-HINT" class="headerlink" title="NOT HINT"></a>NOT HINT</h2><h3 id="请务必在你的程序最前面完整地加入以下两行代码"><a href="#请务必在你的程序最前面完整地加入以下两行代码" class="headerlink" title="请务必在你的程序最前面完整地加入以下两行代码"></a>请务必在你的程序最前面完整地加入以下两行代码</h3><p>（这是两个函数的实现，但你不必关心具体是如何实现的，更不要试图改动，以免发生意外错误~）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#define</span> <span class="hljs-built_in">submit</span>(<span class="hljs-attribute">x</span>) (<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,x),<span class="hljs-built_in">fflush</span>(stdout),<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; &quot;</span>),(int)(<span class="hljs-built_in">getchar</span>()-<span class="hljs-string">&#x27;0&#x27;</span>))<br><span class="hljs-selector-id">#define</span> <span class="hljs-built_in">guess</span>(<span class="hljs-attribute">x</span>) return (<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;m=%d\n&quot;</span>,x),<span class="hljs-built_in">fflush</span>(stdout))<br></code></pre></td></tr></table></figure><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p>1 个正整数 $n$，保证 $3≤n≤10000$。</p><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p>无</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">100<br></code></pre></td></tr></table></figure><h2 id="submit-x-返回值样例"><a href="#submit-x-返回值样例" class="headerlink" title="submit(x) 返回值样例"></a><code>submit(x)</code> 返回值样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">0<br>0<br>0<br>0<br>1<br></code></pre></td></tr></table></figure><h2 id="样例解释-1"><a href="#样例解释-1" class="headerlink" title="样例解释"></a>样例解释</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> submit(x) (printf(<span class="hljs-string">&quot;%d\n&quot;</span>,x),fflush(stdout),scanf(<span class="hljs-string">&quot; &quot;</span>),(int)(getchar()-<span class="hljs-string">&#x27;0&#x27;</span>))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> guess(x) return (printf(<span class="hljs-string">&quot;m=%d\n&quot;</span>,x),fflush(stdout))  </span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span>  </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n); <span class="hljs-comment">//第一步先读入 n</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">0</span>; i--) <br>    &#123;<br>        <span class="hljs-type">int</span> jud = <span class="hljs-built_in">submit</span>(i); <span class="hljs-comment">// jud 中获得了这次提交是否预警的反馈</span><br>        <span class="hljs-keyword">if</span>(jud == <span class="hljs-number">1</span>) <br>        &#123;<br>            <span class="hljs-built_in">guess</span>(i); <span class="hljs-comment">//猜测最终结果为当前的 i</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//这行可以省略，因为 guess(i) 自带 return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>返回值样例或许可以来源于这个程序，这里每次 <code>submit(i)</code> 对应的不同语句数（<code>i</code> 的值）分别为 $100,99,98,97,96$，反馈依次为 $0,0,0,0,1$，说明查重红线 $m&#x3D;96$。</p><p>但这是一个只能通过样例的示例，用来演示这个程序的结构。</p><p>如果 $n&#x3D;100,m&#x3D;1$ 那么这个示例程序显然因为提交次数过多就不能 <code>AC</code> 了！</p><blockquote><p>此题需要格外注意限制条件，预警3次即清0，考虑到最后一定会经过从右往左扫描试出第一个预警值m，所以在此之前的阶段必须限制只能试错一次（现实是人生试错的次数太少了，故三思而后行）。相当于逐步缩小m所在的区间。一个可行的方法是从右往左扫描，但是提交次数是有限制的，如果m比较小，在试出答案前提交次数就已经消耗完了。所以应该采用“线性探测”方法，每次探测一段，逐步缩小范围——需要注意的是每探测一次会消耗一次提交次数，为保证每一个可能的区间能够被检测，因此，第$i$次探测的长度为$k-i,(k&#x3D;\sqrt{2n})$,求和会发现$\sum_{i&#x3D;1}^{i&#x3D;k-1}(k-i)&#x3D;k(k-1)&#x2F;2&#x3D;n-\frac{\sqrt{2n}}{2}$,理论上是不可能将整个区间给探测完的，所以这里 $hack$ 一下，面向结果编程，10个测试点不可能完全覆盖，多试探几次，在中间的空白段直接跳过就能过</p><p>这题刚开始没明白，自己计算的时候只是算了个大概的，但是这样没有严谨的证明反而会增加思维的负担，前面有好多次都试错</p></blockquote><h1 id="W-见证奇迹的时刻-！"><a href="#W-见证奇迹的时刻-！" class="headerlink" title="W 见证奇迹的时刻 ！"></a><code>W</code> 见证奇迹的时刻 ！</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：2&#x2F;49 <code>(4.08%) </code>  正确率：2&#x2F;115 <code>(1.74%)</code></p><h2 id="题目背景-1"><a href="#题目背景-1" class="headerlink" title="题目背景"></a>题目背景</h2><p>相信大家都看了今年央视春晚的魔术，其本质是一个约瑟夫环问题，魔术流程如下：</p><ol><li>将 $N$ 张牌对半撕开，一半整体放到另一半下面。</li><li>将第一张牌放到最后，重复次数 &#x3D;&#x3D; 自己名字字数。</li><li>将前 $N−1$ 张牌插到中间，然后将第一张牌藏起来。</li><li>根据南北，将最前 1 或 2 或 3 张牌插到中间。</li><li>男生扔掉第 1 张牌，女生扔掉前 2 张牌。</li><li>将第一张牌放到最后，重复 $Q$ 次。</li><li>将当前第 1 张牌放到最后，再将此后第 1 张牌扔掉…… 重复此过程直到只剩一张牌。</li></ol><p>最后剩的牌与藏起来的牌刚好能匹配，魔术成功。</p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>原魔术中 $N&#x3D;4, Q&#x3D;7$；当 $N&gt;4$ 时，$Q$ 为能保证男女生在操作无误时都成功的最小值。</p><p>主持人在 <strong>第 4 步</strong> 中不小心把一张牌插到了最后，导致原来的最后 1 张牌变为了倒数第 2 张牌。不过或许他自己悄悄将 <strong>第 5 步</strong> 操作改为一次性扔掉前 $M$ 张，就依然有成功的可能。</p><p>现给出一个 $N$，请问是否存在一个满足下列条件的正整数 $M$，使得当 <strong>第 6,7 步</strong> 不再出错时，最终能成功匹配？</p><p>$$<br>⌊\frac{Q}{2 N−M−1}⌋≤\frac{2^{⌊\log _2Q⌋}}{2^{⌊\log _2(2N−M−1)⌋}}+2<br>$$</p><p>其中，$⌊X⌋$ 表示对 $X$ 向下取整。</p><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><p>不定组输入，不超过 1000 组；每组 1 行，若干个整数。</p><p>每行第一个整数为 $t$，后面 $t$ 个整数，依次为 $a_1,a_2,a_3,…,a_t$，用来表示这一组数据的 $N$。$a_i$ 表示 $N$ 在二进制下从低位向高位数第 $i$ 个 <code>1</code> 出现在第 $a_i$ 位（最低位是第 0 位）。</p><p>保证 $4≤N≤2^{10^8}，1≤t≤1000$。</p><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><p>每组 1 行。</p><p>若存在相应的 $M$，输出 <code>YES</code>。</p><p>若不存在相应的 $M$，输出 <code>NO</code>。</p><h2 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">NO</span><br><span class="hljs-keyword">YES</span><br></code></pre></td></tr></table></figure><h2 id="样例解释-2"><a href="#样例解释-2" class="headerlink" title="样例解释"></a>样例解释</h2><p>第 $1$ 组数据中 $N&#x3D;5$，此时不存在 $M$。</p><p>第 $2$ 组数据中 $N&#x3D;15$，此时存在 $M&#x3D;24$。</p><h2 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h2><p>不难发现：$Q&#x3D;2^y−1  ,  2^{y−1}&lt;2N−2≤2^y$</p><p>这是迷宫密码，本题不必理会：<code>MSJ</code></p><blockquote><p>这题觉得太长，连题都没有读完。但是经过这次练习，看到题目限制这么大的数据量，说明一定有常数时间的判断方法，否则就不能被解决，只不过是没明白罢了</p></blockquote><h1 id="X-国庆-Xhesica的集合"><a href="#X-国庆-Xhesica的集合" class="headerlink" title="X 国庆-Xhesica的集合"></a><code>X</code> 国庆-Xhesica的集合</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：62&#x2F;87 <code>(71.26%) </code>  正确率：62&#x2F;162 <code>(38.27%)</code></p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p> Xhesica有一个集合 $S$ 用于存放一些正整数,一开始，$S$ 为空集 ，他首先将所有的位于 $l$ 和 $r$ 之间的整数插入集合 $S$ ,即满足当且仅当整数 $x$ 满足 $l≤x≤r$ 时，整数 $x$ 会被加入于集合中。随后, Xhesica 允许你进行接下来的操作:</p><p> 选择仍然存在于集合中的三个不同的整数 $a,b,c$，满足 $\gcd(a,b)&#x3D;\gcd(a,c)&#x3D;\gcd(b,c)&#x3D;1$，之后将这三个整数从集合中删去。</p><p> 理论上最多能进行多少次操作呢?</p><p> 注意，$\gcd(a,b)$指的是 $a$ 和 $b$ 的最大公因数。</p><h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><p> 本题目包括多个测试用例，测试用例之间互相独立。</p><p> 第一行仅有一个正整数 $t$,满足 $1≤t≤500$ ,表示测试用例的数量</p><p> 接下来有 $t$ 行，每行表示一个测试用例，每行包括两个正整数 $l,r$ 满足 $1≤l≤r≤108$，表示含义同题目描述。</p><h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><p> 对于每一个测试用例，输出一行，仅包括一个整数，表示本测试用例下你能进行的最多的操作次数。</p><h2 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">8</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">21</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">51 </span><span class="hljs-number">60</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">15</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">26</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>1<br>3<br>1<br>2<br>3<br>4<br>250<br></code></pre></td></tr></table></figure><h2 id="样例解释-3"><a href="#样例解释-3" class="headerlink" title="样例解释"></a>样例解释</h2><p> 对于测试用例 1，可以选择 $a&#x3D;1，b&#x3D;2，c&#x3D;3$，之后集合变为空集，无法进行更多的操作。</p><p> 对于测试用例 2, 可以选择 $a&#x3D;3，b&#x3D;5，c&#x3D;7$ ,之后集合中仅剩下 $4,6$，无法进行更多的操作。</p><blockquote><p>这题明确目标是使得在区间$[l,r]$中的操作$F(a,b,c)&#x3D;{a,b,c\in [l,r],\and\gcd(a,b)&#x3D;\gcd(b,c)&#x3D;\gcd(c,a)}$的次数最大化，$a,b,c$需要满足的条件就是三个数的最大公因数为1，其实简单写一写，就可以知道$\text{if}\ k\mod 2&#x3D;&#x3D;0,\Rightarrow\ \gcd(k-1,k)&#x3D;\gcd(k,k+1)&#x3D;\gcd(k+1,k-1)&#x3D;1$而且这样使得$a,b,c$三个数尽量的接近，使得能进行的操作次数达到最大化。如果这样连续分组，中间会空出一个偶数来，因此周期是4.需要注意的是考虑区间$[l,r]$的边界条件，合理的情况是按l和r的奇偶性分4种情况讨论</p></blockquote><h1 id="Y-摩卡与数学家水獭"><a href="#Y-摩卡与数学家水獭" class="headerlink" title="Y 摩卡与数学家水獭"></a><code>Y</code> 摩卡与数学家水獭</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：122&#x2F;176 <code>(69.32%) </code>  正确率：122&#x2F;501 <code>(24.35%)</code></p><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>$\text{Moca}$ 非常喜欢水獭，一天，她遇到了一只被难题困扰着的数学家水獭。</p><p>对于一个给定的正整数，显然可以把它分解为若干质数的和。数学家水獭想知道，对一个给定的正整数，把它分解为若干质数（可以重复）需要的质数个数最少是多少。</p><p>由于这个问题太难了，数学家水獭希望 Moca 编程帮它得到 $5×106$ 以内的结果。</p><h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><p>第一行一个正整数 $n$ ，表示接下来会有 $n$ 组输入，$1≤n≤500000$ 。</p><p>接下来 $n$ 行，每行一个正整数 $k$ ，代表数学家水獭每次询问的正整数，有 $2≤k≤5×106$ 。</p><h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><p>输出 $n$ 行，每行一个正整数，代表对应输入的正整数被分解的最少的质数个数。</p><h2 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">4<br>3<br>9<br>12<br>27<br></code></pre></td></tr></table></figure><h2 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br>2<br>3<br></code></pre></td></tr></table></figure><h2 id="样例解释-4"><a href="#样例解释-4" class="headerlink" title="样例解释"></a>样例解释</h2><p>对于 $3$ ，质数个数最少的分解为 $3&#x3D;3$ ，只需要 $1$ 个质数。</p><p>对于 $9$ ，质数个数最少的分解为 $9&#x3D;2+7$ ，需要 $2$ 个质数。</p><p>对于 $12$ ，质数个数最少的分解为 $12&#x3D;5+7$ ，需要 $2$ 个质数。</p><p>对于 $27$ ，质数个数最少的一种分解为 $27&#x3D;3+7+17$ ，需要 $3$ 个质数。</p><blockquote><h3 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h3><p>著名的哥德巴赫猜想，小学生都知道的陈景润证明$1+1$的情况，</p><p>果然是大数学家。Goldbach猜想，任何大于2的偶数都可以分解为两个素数相加，二任何大于2的质数则可以表示成3个质数之和</p><p>对于是奇数而非质数时，考分解为一个2和质数，其余则是根据定理[^1]</p><p>判断即可，对于素数的判断，可以进行素数测试（前面有Miller Rabin测试可以判断$2^{32}$以内的整数</p><details>    <summary>zhu</summary>    数学、物理百科之根基。有复变，实变，拓扑等广阔数学分支，而计算机领域也是常常用到，益自学数学，物理，提高自己的理论分析水平</details><p>但是本题主要逻辑流是在查询素数上，而且数据范围也不大，所以使用素数表是一个明智选择。打表根据优化情况，一般是根据对称性将区间缩小为$[1, \sqrt{n}]$ 然后使用筛素数的方法来处理，然而筛素数又有多种方法，一般有埃氏筛，但是效率较低，这里选用欧拉筛</p></blockquote><h1 id="Z-摩卡与取石子游戏"><a href="#Z-摩卡与取石子游戏" class="headerlink" title="Z 摩卡与取石子游戏"></a><code>Z</code> 摩卡与取石子游戏</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：91&#x2F;151 <code>(60.26%) </code>  正确率：91&#x2F;372 <code>(24.46%)</code></p><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>在受到数学家水獭的启发后，Moca 想到了一个好玩的游戏，她决定邀请 Ran 一起玩这个游戏。</p><p>游戏规则如下：现在有 $n$ 个石子，Ran 先手，每名玩家每次可拿走<strong>质数个石子</strong>（拿走的石子不可能比剩下的石子多，也就是说此质数应该小于等于剩下的石子数），轮到一位玩家时不能不拿。将最后一个石子取走的玩家获胜；或者当某位玩家取完石子后，若场上只剩下一个石子，则对方获胜。</p><p>Moca 和 Ran 都很聪明，她们每次都会选择最优策略来进行操作。请你编写一个程序，判断出在一个给定的初始局面下两个人谁会赢。</p><h2 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h2><p>第一行一个正整数 $t$ ，表示输入数据组数，其中 $1≤t≤106$。</p><p>接下来 $t$ 行每行一个正整数 $n$ ，表示初始的石子数，其中 $2≤n≤109$。</p><h2 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h2><p>每组输入对应一行输出，若 Ran 获胜（先手获胜），则输出 <code>Ran</code> ；若 Moca 获胜（后手获胜），则输出 <code>Moca</code>。</p><h2 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>3<br>4<br>8<br></code></pre></td></tr></table></figure><h2 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Ran</span><br><span class="hljs-attribute">Moca</span><br><span class="hljs-attribute">Moca</span><br></code></pre></td></tr></table></figure><h2 id="样例解释-5"><a href="#样例解释-5" class="headerlink" title="样例解释"></a>样例解释</h2><p>若初始有 3 个石子，则 Ran 拿走 3 颗石子后获胜。</p><p>若初始有 4 个石子，如果 Ran 拿走 3 颗石子，则剩下 1 颗石子，根据获胜规则二，Moca 获胜；若 Ran 拿走 2 颗石子，Moca 再拿走 2 颗石子，根据获胜规则一，Moca 获胜。</p><p>若初始有 8 个石子，如果 Ran 拿走 3 颗石子，Moca 再拿走 5 颗石子，根据获胜规则一，Moca 获胜；若 Ran 拿走 5 颗石子，Moca 再拿走 3 颗石子，根据获胜规则一，Moca 获胜；若 Ran 拿走 2 颗石子，Moca 再拿走 2 颗石子，此时剩下 4 颗石子，且 Ran 先拿，根据上个样例，Moca 获胜。</p><p>Author：Moca</p><blockquote><p>这种博弈问题真的不会做，在经过“猪脚”步步引导后，终于理解一点先后手的博弈状态。</p><p>整个过程可以说是行云流水，非常丝滑。首先样例是给了一些提示的，（理所当然），类比同类问题：一次可以取一个或者两个的问题，如何判断这样对局（这种题一般需要找到先手必输的条件，如果当前先手能够将当前局面转化成先手必输，则当前局面就是先手必赢。一个小提示：和余数有关。具体的策略是谁能让最后一个回合场上剩下$m+1$个谁就赢。现在推广一下，如果你能拿超过m个呢？核心策略依旧是维持$m+1$或者$m+1的倍数个$，为了维持这个状态，所以我们需要使每一个回合取得子数为m+1的倍数个（这是中间过程）。</p><p>现在考虑开始时，如果开具不是$m+1$的倍数个，先手就会让他剩$m+1$的倍数个，然后自己就可以当后手</p><p>那么对于质数来说，这个$m$是多少？也就是说，$m$取多少能保证质数里没有$m+1$的倍数，并且模$m+1$等于1到$m$的均存在</p><p>其实只有一个m能满足上述条件，$m+1&#x3D;4$</p><p>总结：这种博弈题一般都是先看后手必胜的条件，其余情况先手只需要能转换成后手必胜的情况即可。有可能会有余数、位运算等思考角度</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>I 💖 [PUAA]</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Summary2</title>
    <link href="/2024/10/09/Summary2/"/>
    <url>/2024/10/09/Summary2/</url>
    
    <content type="html"><![CDATA[<p>$O\sim T$</p><span id="more"></span><h1 id="O-更好的isprime"><a href="#O-更好的isprime" class="headerlink" title="O 更好的isprime"></a><code>O</code> 更好的isprime</h1><p>时间限制：1500ms  内存限制：65536kb</p><p>通过率：399&#x2F;418 <code>(95.45%) </code>  正确率：399&#x2F;708 <code>(56.36%)</code></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>传统的判断素数的方式都是从 2 枚举到$ ⌊\sqrt{n}⌋$，试图寻找 $n$ 的因数，如果找不到则说明 $n$ 是素数。这种方法判断素数的时间复杂度是 $O(\sqrt{n})$，那我们能不能做的更好呢？</p><p>Miller-Rabin 素性测试，是一种基于二次探测定理和费马小定理的，用于快速测试一个<strong>奇数</strong>是否是素数的方法，对 $n$ 进行一次 Miller-Rabin 素性测试的时间复杂度仅为 $O(\log n)$。通过素性测试的数不一定是素数，可是没通过素性测试的数一定不是素数。用不同的数作为基底对 $n$ 进行多次素性测试，可以使得通过了这些素性测试的 $n$ 是素数的概率尽可能大。</p><p>不过对于范围 $[1,2^{32})$ 的数字，只要它能分别通过 $2,7,61$ 这三个数为基底的 Miller-Rabin 素性测试，它就一定是素数。</p><p>下面给出进行 Miller-Rabin 素性测试的代码，请你调用 Miller-Rabin 素性测试函数实现一个更好的 <code>isprime</code> 函数，并调用 <code>isprime</code> 函数完成本题要求。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">qpow</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a, <span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> n, <span class="hljs-built_in">int</span> mod</span>) <span class="hljs-comment">// 这只是一个快速幂，你可以不用管它</span></span><br>&#123;<br>    <span class="hljs-built_in">int</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">int</span> <span class="hljs-keyword">base</span> = a;<br>    <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>)<br>        &#123;<br>            ans = ans * (<span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span>)<span class="hljs-keyword">base</span> % mod;<br>        &#125;<br>        <span class="hljs-keyword">base</span> = (<span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span>)<span class="hljs-keyword">base</span> * <span class="hljs-keyword">base</span> % mod;<br>        n &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-comment">/* 如果通过素性测试，那么下面这个函数返回1，否则返回0 */</span><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">Miller_Rabin_check</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> n</span>) <span class="hljs-comment">// a是基底，n是你拿来进行素性测试的数</span></span><br>&#123;<br>    <span class="hljs-built_in">int</span> u = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (u % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>    &#123;<br>        u /= <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-built_in">int</span> v = qpow(a, u, n);<br>    <span class="hljs-keyword">if</span> (v == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (u &lt;= n - <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (v == n - <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (v == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        v = <span class="hljs-number">1l</span>l * v * v % n;<br>        u *= <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">isprime</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> n</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">2</span> || n == <span class="hljs-number">7</span> || n == <span class="hljs-number">61</span>) <span class="hljs-comment">// 作为基底的这三个数需要特殊处理</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">/* 补全你的代码 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行一个正整数 t 表示数据组数，$1\le t\le 3\times 10^5$。</p><p>接下来 $t$ 行，每行一个正整数 $n$，$2\le n\le 10^9$。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>对于每组数据，如果 $n$ 是素数，输出 <code>Yes</code>，否则输出 <code>No</code>。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">6</span><br><span class="hljs-number">2</span><br><span class="hljs-number">61</span><br><span class="hljs-number">47</span><br><span class="hljs-number">1145</span><br><span class="hljs-number">1919810</span><br><span class="hljs-number">998244353</span><br></code></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">Yes</span><br><span class="hljs-keyword">Yes</span><br><span class="hljs-keyword">Yes</span><br><span class="hljs-keyword">No</span><br><span class="hljs-keyword">No</span><br><span class="hljs-keyword">Yes</span><br></code></pre></td></tr></table></figure><h2 id="Not-Hint"><a href="#Not-Hint" class="headerlink" title="Not Hint"></a>Not Hint</h2><p>如果你实在很闲可以看看<a href="https://oi-wiki.org/math/number-theory/prime/#millerrabin-%E7%B4%A0%E6%80%A7%E6%B5%8B%E8%AF%95">原理</a></p><details>    <summary>思路</summary>    没有思路，直接用and逻辑检测。唯一需要的是把代码框架写好：输入 --> 处理 --> 输出</details><h1 id="P-解数织科学"><a href="#P-解数织科学" class="headerlink" title="P 解数织科学"></a><code>P</code> 解数织科学</h1><p>时间限制：3000ms  内存限制：65536kb</p><p>通过率：7&#x2F;20 <code>(35.00%) </code>  正确率：7&#x2F;76 <code>(9.21%)</code></p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>某咸鱼同学希望用若干数字描述行和列的涂色情况，如下图所示：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/m7zo4eck.png" alt="img"></p><p>对于第一行，<code>1 1</code>表示有 $2$ 个长度为 $1$ 的 <code>1</code>（涂色）序列；对于第二列，<code>4</code>表示有 $1$ 个长度为 $4$ 的 <code>1</code> （涂色）序列。</p><p>特别的，如果某行或某列没有一个涂色方块，我们用一个 <code>0</code> 表示。</p><p>请你根据给出的行列的情况，输出涂出颜色的地图。</p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p>共 $2n+1$ 行。</p><p>第一行为一个正整数 $n$ 。</p><p>接下来 $n$ 行，输入从第一行到最后一行的情况，详见题目描述。</p><p>再接下来 $n$ 行，输入从第一列到最后一列的情况，详见题目描述。</p><p>保证 $n≤15$ ，且一定有解。</p><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p>$n$ 行，每行 $n$ 个字符（字符仅为 <code>0</code> 或 <code>1</code>），表示涂色后的地图。</p><p>本题采用 $\text{Special Judge}$ ，对于有多解的情况，<strong>请仅输出其中一种</strong>。</p><h2 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">2</span><br><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br><span class="hljs-number">4</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">10001<br>11011<br>01110<br>11000<br>11000<br></code></pre></td></tr></table></figure><h3 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h3><blockquote><p>上网搜一下可以知道这还是一个比较要动脑的游戏，起源于国外，也可以搜到一些程序化解法——但是基本不可用，毕竟你从这些人写的博客就知道不仅技术水平低，同时文化水平也高不到哪里去。唯一比较好的一篇中文是<a href="https://blog.csdn.net/weixin_44007632/article/details/102010794#:~:text=%E6%95%B0%E7%BB%87%E6%9C%89%E4%B8%A4%E4%B8%AA%E5%BE%88%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84">数织游戏中的程序思维和数织的程序解法-CSDN博客</a>，其中比较有趣的是对于数据结构状态的定义和一些个定理：</p><ul><li>网格每一格拥有三种状态</li><li>定义连续空白条</li><li>定义一个表示函数</li><li>定理，平行传递性，交换不变形</li><li>……</li></ul><p>总的来说就是对现实问题进行数学抽象，建模简化，并进行程序化流程设计……当然，一般解决问题都是这样嘛。不过在思路受阻时宏观的考量的确能给人一些顿悟</p><p>还有一点就是，这个博客可能并不是原版，更多还待发掘。英文就有很多信息了[Solving Nonograms — Nonogram Solver (stevocity.me.uk)](<a href="https://stevocity.me.uk/nonogram/solve#:~:text=How">https://stevocity.me.uk/nonogram/solve#:~:text=How</a> to solve Nonograms yourself Before attempting to solve a)</p><p><a href="https://cn.puzzle-nonograms.com/">数织 - 在线解谜游戏 (puzzle-nonograms.com)</a></p><p>原本自己想的是先确定行的数量，然后根据列的数量进行dfs暴力搜索——及时剪枝</p></blockquote><h1 id="Q-逞强好胜的-Yanami-！"><a href="#Q-逞强好胜的-Yanami-！" class="headerlink" title="Q 逞强好胜的 Yanami ！"></a><code>Q</code> 逞强好胜的 Yanami ！</h1><p>时间限制：300ms  内存限制：65536kb</p><p>通过率：100&#x2F;188 <code>(53.19%) </code>  正确率：100&#x2F;721 <code>(13.87%)</code></p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>$\text{Yanami}$ 想变得和 $\text{Alice}$ 一样强</p><p>但是现在她还无法做到，她只能研究 $\text{Alice}$ 留下的世纪难题</p><p>$\text{Alice}$ 给 $\text{Yanami}$ 留下了一个 “异或三角形”</p><p>一个 $n$ 层的异或三角形有以下特征：</p><ul><li>第 1 层有 1 个整数，第 2 层有 2 个整数，⋯⋯ ，第 $n$ 层有 $n$ 个整数</li><li>如果用 $a(i,j)$ 表示异或三角形第 $i$ 层从左往右数的第 $j$ 个数 $(1≤j≤i) $，那么对于$ ∀1≤i≤n−1,1≤j≤i$，有 $a(i,j)&#x3D;a(i+1,j)⊕a(i+1,j+1)$ ，即<strong>异或三角形中的每一个数等于其正下方相邻两个数的异或和</strong></li></ul><p>下方就是一个 $5$ 层的“异或三角形”：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tex">4<br>  4  0<br>2  6   6<br>  3  1   7   1<br>1   2  3   4   5<br></code></pre></td></tr></table></figure><p>对于第 4 层，从左往右有<br>$$<br>a(4,1)&#x3D;a(5,1)⊕a(5,2)&#x3D;1⊕2&#x3D;3\</p><p>a(4,2)&#x3D;a(5,2)⊕a(5,3)&#x3D;2⊕3&#x3D;1\</p><p>a(4,3)&#x3D;a(5,3)⊕a(5,4)&#x3D;3⊕4&#x3D;7\</p><p>a(4,4)&#x3D;a(5,4)⊕a(5,5)&#x3D;4⊕5&#x3D;1<br>$$</p><p>其他层类似</p><p>可以发现，只要确定了最底层的 $n$ 个数字，就可以推导出整个“异或三角形”</p><p>不幸的是，$\text{Alice}$ 给 $\text{Yanami}$ 留下的“异或三角形”，恰好只剩下最底层的 $n$ 个数字，其他数字都不见了</p><p>现在， $\text{Yanami}$ 想要知道“异或三角形”最顶层的那一个数字是什么，你能帮帮她吗？</p><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><p>输入包括两行</p><p>第一行包括一个整数 $n$ ，表示“异或三角形”的层数</p><p>第二行包括 $n$ 个整数$ x_1,x_2,⋯,x_n$ ，表示“异或三角形”最底层的 $n$ 个数</p><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><p>输出包括一行</p><p>第一行包括一个数，表示“异或三角形”最顶端的数值</p><h2 id="输入样例-11"><a href="#输入样例-11" class="headerlink" title="输入样例 11"></a>输入样例 11</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-11"><a href="#输出样例-11" class="headerlink" title="输出样例 11"></a>输出样例 11</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h2 id="输入样例-22"><a href="#输入样例-22" class="headerlink" title="输入样例 22"></a>输入样例 22</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-22"><a href="#输出样例-22" class="headerlink" title="输出样例 22"></a>输出样例 22</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h2 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h2><p>样例 2 的“异或三角形”如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex">      1<br>    5   4<br>  0   5   1<br>1   1   4   5<br></code></pre></td></tr></table></figure><p>故答案为 1</p><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><ul><li>对于 $35%$ 的数据，$1≤n≤10^3$</li><li>对于 $100%$ 的数据，$1≤n≤10^5,0≤x_i≤10^9$</li></ul><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><blockquote><p>没错！</p><p>一次又一次地 屡败屡战！</p><p>是眼泪教会我坚强</p><p>我相信</p><p>总有一天 总有一天 会迎来美满结局</p><p>开始转动吧！无与伦比的命运</p><p>——《逞强好胜的女孩》</p></blockquote><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/3mvp8erd.png" alt="img"></p><details>    <summary>思路</summary>    这道题在数量比较小的时候规律还是非常好找的，可以省略中间众多的异或过程，直接计算出需要哪些元素作异或操作就可以。具体方法是从1开始右移一格得到新向量，与原先向量作异或和，n次迭代后得到为1的分量即为需要做异或和操作的元素，否则舍弃。因为计算机中是二进制，所以可以根据二进制表示的周期性来对迭代过程进行加速。但是这题尝试好久都没有得到有效解决，可能是规律找错了。    大概有100人通过了，心理挺着急的，为什么别人都会，就我不会？想不出来，前后浪费半天——悲</details><h1 id="R-摩卡与主唱"><a href="#R-摩卡与主唱" class="headerlink" title="R 摩卡与主唱"></a><code>R</code> 摩卡与主唱</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：107&#x2F;193 <code>(55.44%) </code>  正确率：107&#x2F;742 <code>(14.42%)</code></p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>作为乐队的主唱，Ykn 和 Ran 对音乐有着不同的理解。</p><p>Ykn 在听一首音乐时，会格外关注音乐中<strong>高音转低音</strong>的部分；Ran 在听一首音乐时，会格外关注音乐中<strong>低音转高音</strong>的部分。在听完一次演唱会后，二人对其中的一首曲子格外感兴趣，经过讨论后，二人发现这首曲子所有音符<strong>只由高音和低音组成</strong>，且其中的<strong>高音转低音次数和低音转高音次数是完全相同的</strong>。但是二人只能回忆起其中的部分音符。</p><p>为了能还原这首曲子，Ykn 和 Ran 找到了会编程的 Moca。</p><h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><p>第一行一个正整数 $n$ ，表示曲子音符的个数，$1≤n≤100000$ 。</p><p>第二行 $n$ 个字符，表示 $n$ 个音符，每个音符只有 $1\ 0\ ?$ 三种可能的输入，分别表示这个音符是高音音符，低音音符以及回忆不起来的音符。</p><h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><p>输出 1 行，代表原曲有多少种可能（由于两个人的记忆可能存在偏差，所以结果为 0 也是有可能的），<strong>由于结果可能很大，你需要将正确的答案对 $10^9+7$ 取模后输出。</strong></p><h2 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">5</span><br><span class="hljs-attribute">1</span>?<span class="hljs-number">001</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h2 id="THINK"><a href="#THINK" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>无</p></blockquote><h2 id="样例解释-1"><a href="#样例解释-1" class="headerlink" title="样例解释"></a>样例解释</h2><p>若想符合条件，原曲有 $11001$ 和 $10001$ 两种可能。</p><p>Author：Moca</p><blockquote><p>该题也是，别人都会，为什么就我不会——懊恼。</p><p>应该是一个能在线性时间处理的问题，不然不会有这种数据。所以，处理的时候应该只需要考虑局部就行，最后验证可行性</p><p>Moca是种$Italian$浓缩咖啡:coffee:,还有拿铁，记得大川课上还让我们每次做咖啡给他品，居然把这个忘了……</p></blockquote><h1 id="S-哈希攻击"><a href="#S-哈希攻击" class="headerlink" title="S 哈希攻击"></a><code>S</code> 哈希攻击</h1><p>时间限制：2000ms  内存限制：65536kb</p><p>通过率：18&#x2F;42 <code>(42.86%) </code>  正确率：18&#x2F;147 <code>(12.24%)</code></p><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>字符串以某种方式映射到整数上的过程，称作「字符串哈希」。由这个字符串经过哈希得到的整数，我们称其为字符串的「哈希值」。以下是一种比较常用的字符串哈希公式：</p><p>$f(s)&#x3D;(∑_{i&#x3D;1}^n a_i×b^n−i)\mod p$</p><p>其中，$a_i$ 是字符串第 $i$ 位对应字符所需要映射的值，$b$ 是小于 $p$ 的正整数，$p$ 是一个大质数。</p><p>当两个字符串完全相同时，它们的哈希值也必定完全相同。可是反之，当两个字符串的哈希值完全相同时，它们本身并不一定会完全相同。因为哈希函数最终对 $p$ 取模的操作，使得无穷无尽的字符串最终只能被映射到 $0∼p−1$ 的正整数上，而这就必定要产生多个不同字符串拥有同一哈希值的情况。这种两个不同的字符串具有相同的哈希值的情况，我们称其为「哈希冲突」</p><p>可是 Gino 并不害怕。他使用如下函数对字符串进行哈希，并且认为你无论如何也无法在短时间内产生无穷多的字符串，并从无穷多的字符串中找到哈希冲突的情况。</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ocaml"><span class="hljs-built_in">int</span> strhash(<span class="hljs-built_in">char</span> s<span class="hljs-literal">[]</span>, <span class="hljs-built_in">int</span> len, <span class="hljs-built_in">int</span> b, <span class="hljs-built_in">int</span> p)<br>&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-keyword">val</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">val</span> = (<span class="hljs-number">1l</span>l * <span class="hljs-keyword">val</span> * b + s[i] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>) % p;<br>    &#125;<br>    return <span class="hljs-keyword">val</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>请你找到任意两个字符串，使它们满足以下条件：</p><ul><li>仅由小写字母 <code>a-z</code> 组成</li><li>两者长度相同，且长度 $n$ 满足 $1≤n≤104$</li><li>两者不完全相同，却在给定 $b,p$ 的条件下有着一致的哈希值</li></ul><h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><p>两个由空格隔开的正整数 $b,p$，含义与题意相同。</p><ul><li>对于 10%的数据，31≤b&lt;p≤1009</li><li>对于 30% 的数据，31≤b&lt;p≤1000033</li><li>对于 100% 的数据，31≤b&lt;p≤1000000007</li></ul><p>所有数据均保证 p 是一个质数。</p><h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><p>两行，分别输出你找到的两个字符串，需要满足题目给出的条件。满足条件的字符串有很多组，你只需要输出任意一组即可。</p><h2 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">131 </span><span class="hljs-number">1033</span><br></code></pre></td></tr></table></figure><h2 id="输出样例（答案不唯一）"><a href="#输出样例（答案不唯一）" class="headerlink" title="输出样例（答案不唯一）"></a>输出样例（答案不唯一）</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">vda</span><br><span class="hljs-attribute">ciu</span><br></code></pre></td></tr></table></figure><h2 id="样例解释-2"><a href="#样例解释-2" class="headerlink" title="样例解释"></a>样例解释</h2><p>对于字符串 <code>vdl</code>，其哈希值为 $(22×1312+4×1311+1×1310)\mod 1033&#x3D;378067\mod 1033&#x3D;1022$</p><p>对于字符串 <code>ciu</code>，其哈希值为 $(3×1312+9×1311+10×1310)\mod 1033&#x3D;52672\mod 1033&#x3D;1022$</p><p>两个不同的字符串却有着同样的哈希值，因此这组输出是正确的。</p><p>注意你的输出不必和输出样例相同，只需满足题目条件即可。</p><hr><p>$HASHHACKER$: <img src="https://cfrating.baoshuo.dev/rating?username=cwz2024&style=plastic" alt="Codeforces Rating of @cwz2024"></p><h2 id="THINK-1"><a href="#THINK-1" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>有点思路。解法一定跟生日问题有关。</p><p>可以思考这个哈希函数的计算式，二者相减可以得到一个多项式，而系数正好就是一个$b$ 进制数，但是要求是 ASCll 码中的小写字符，所以需要转化成一个系数相差不超过26的$b$进制</p><p>问题成功转化</p></blockquote><h1 id="T-多重哈希攻击"><a href="#T-多重哈希攻击" class="headerlink" title="T 多重哈希攻击"></a><code>T</code> 多重哈希攻击</h1><p>时间限制：2000ms  内存限制：65536kb</p><p>通过率：11&#x2F;22 <code>(50.00%) </code>  正确率：11&#x2F;114 <code>(9.65%)</code></p><p><strong>本题是题目《哈希攻击》的困难版本</strong>。</p><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>在 $\mathscr{HASHHACKER}$ 的攻击下，Gino 自认为没有破绽的字符串哈希被攻破了！可是 Gino 并不打算放弃。于是，他找到了一种叫「多重哈希」的技术。</p><p>我们知道，字符串可以通过以下方式映射到一个整数上：<br>$$<br>f(s)&#x3D;(∑_{i&#x3D;1}^n a_i×b^n−i)\mod p<br>$$<br>其中，$a_i$ 是字符串第 $i$ 位对应字符所需要映射的值，$b$ 是小于 $p$ 的正整数，$p$ 是一个大质数。</p><p>而「多重哈希」，会使用两组及以上的 $b,p$ 将字符串同时映射到两个及以上的整数上，以大大降低哈希冲突的概率。</p><p>Gino 使用的哈希函数与之前一样：</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ocaml"><span class="hljs-built_in">int</span> strhash(<span class="hljs-built_in">char</span> s<span class="hljs-literal">[]</span>, <span class="hljs-built_in">int</span> len, <span class="hljs-built_in">int</span> b, <span class="hljs-built_in">int</span> p)<br>&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-keyword">val</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">val</span> = (<span class="hljs-number">1l</span>l * <span class="hljs-keyword">val</span> * b + s[i] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>) % p;<br>    &#125;<br>    return <span class="hljs-keyword">val</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>不同的是，他这次决定使用两组不相同的 $b,p$ 进行哈希。</p><p>请你找到任意两个字符串，使它们满足以下条件：</p><ul><li>仅由小写字母 <code>a-z</code> 组成</li><li>两者长度相同，且长度 n 满足 $1≤n≤104$</li><li>两者不完全相同，却在给定的两组 $b,p$ 的条件下都有着一致的哈希值</li></ul><h2 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h2><p>共两行，每行两个由空格隔开的正整数 b,p，含义与题意相同。</p><ul><li>对于 $30%$ 的数据，$31≤b&lt;p≤33331$</li><li>对于 $100%$ 的数据，$31≤b&lt;p≤1000000007$</li></ul><p>所有数据均保证 $p$ 是一个质数。</p><p>所有数据均保证 $b_1≠b_2$ 与 $p_1≠p_2$ 至少有一个成立</p><h2 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h2><p>两行，分别输出你找到的两个字符串，需要满足题目给出的条件。满足条件的字符串有很多组，你只需要输出任意一组即可。</p><h2 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">31 </span><span class="hljs-number">1009</span><br><span class="hljs-symbol">114 </span><span class="hljs-number">1033</span><br></code></pre></td></tr></table></figure><h2 id="输出样例（答案不唯一）-1"><a href="#输出样例（答案不唯一）-1" class="headerlink" title="输出样例（答案不唯一）"></a>输出样例（答案不唯一）</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">rkfmftoxsjtoxsjrkfmfrkfmftoxsjrkfmfrkfmfrkfmftoxsj</span><br><span class="hljs-attribute">toxsjtoxsjtoxsjtoxsjrkfmftoxsjrkfmftoxsjrkfmfrkfmf</span><br></code></pre></td></tr></table></figure><h2 id="样例解释-3"><a href="#样例解释-3" class="headerlink" title="样例解释"></a>样例解释</h2><p>$b&#x3D;31,p&#x3D;1009$ 的情况下，两字符串的哈希值都为 $0$。</p><p>$b&#x3D;114,p&#x3D;1033$ 的情况下，两字符串的哈希值都为 $1$。</p><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>为了降低思考难度，本题的输出样例极其富有启发性。</p><p>对于随机数生成函数 <code>rand</code> 来说，请注意，它的随机性有可能在你的本地运行环境下的表现并不好。</p><p>在出题者的本地环境下，<code>RAND_MAX</code>:$ 32767$，即 $2^{15}-1$</p><ul><li>二进制表示下，生成的随机数的最低位的循环节：$2^{17}$</li><li>二进制表示下，生成的随机数的次低位的循环节：$2^{18}$</li><li>二进制表示下，生成的随机数的第三低位的循环节：$2^{19}$</li></ul><p>也许可以解答你在本地调试时遇到的 “灵异事件”。</p><details>    <summary>注</summary>    这题真是不会了，毕竟和密码相关邻域很紧密。之前学CTF的时候连进门都算不上，这里看不懂也难怪</details><blockquote><p>同样是哈希攻击，但是最近 bing 的搜索结果却不太好，浏览器还是要学一学搜索语法才行。而且对于专业邻域的知识，当然是要到专家数据库中搜索，而不是在一般互联网的垃圾堆中浪费时间和生命</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>I 💖 [PUAA]</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Summary1</title>
    <link href="/2024/10/09/Summary1/"/>
    <url>/2024/10/09/Summary1/</url>
    
    <content type="html"><![CDATA[<p>$H\sim N$</p><span id="more"></span><h1 id="H-吉他与孤独与蓝色星球！"><a href="#H-吉他与孤独与蓝色星球！" class="headerlink" title="H 吉他与孤独与蓝色星球！"></a><code>H</code> 吉他与孤独与蓝色星球！</h1><p>时间限制：500ms  内存限制：65536kb</p><p>通过率：241&#x2F;497 <code>(48.49%) </code>  正确率：241&#x2F;1899 <code>(12.69%)</code></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>长大以后，$\text{Hitori}$ 成为了远近闻名的社交达人！</p><p>$\text{Hitori}$ 一共交到了 $m$ 个朋友，每个朋友都有一种独一无二的颜色。为了方便，我们用数字来表示每位朋友的颜色，即：第 $i$ 位朋友的颜色为 $i$ 。</p><p>这一天，$\text{Hitori}$ 又在坐地铁。她发现线路图上从左到右一共有 $n$ 个换乘站，第 $i$ 个换乘站对应的线路颜色为 $a_i$$a_i$ ，并且 $1≤a_i≤m$ 。对于这样一个由颜色构成的序列， $\text{Hitori}$ 将其称为整数序列 $a$ 。</p><p>$\text{Hitori}$ 想起了她的 $m$ 个朋友，她想知道，在序列 $a$ 中，有多少个长度为 $m$ 的子段，满足在子段中，每位朋友的颜色都<strong>恰好只出现了一次</strong>。</p><p><strong>说明</strong>： 一个序列是 $a$ 的子段，当且仅当该序列由若干个 $a$ 中<strong>连续</strong>的元素按顺序组成。如，$[1,2,3]$ 和$ [3,3,5]$ 是 $[1,2,3,3,5]$ 的子段，但 $[1,3,5]$ 和 $ [1,3,2]$ 不是。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入包含两行。</p><p>第一行包含两个整数 $n,m$ ，分别表示序列 $a$ 的长度和 $\text{Hitori}$ 朋友的数量。</p><p>第二行包含 $n$ 个整数 $a_1,a_2,a_3,⋯,a_n (1≤a_i≤m)$，表示颜色序列 $a$ 。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出一行，包括一个整数，表示满足要求的子段数量。</p><h2 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例 1"></a>输入样例 1</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例 1"></a>输出样例 1</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h2 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例 2"></a>输入样例 2</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例 2"></a>输出样例 2</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h2 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例 3"></a>输入样例 3</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例 3"></a>输出样例 3</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">0<br></code></pre></td></tr></table></figure><h2 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h2><p>在样例 $1$ 中，长度为 $3$ 的子段有 3 个，分别是 $[3,2,1],[2,1,3],[1,3,1]$ 。</p><p>其中 $[3,2,1],[2,1,3]$ 满足 $3$ 种颜色都恰好出现了一次。</p><p>$[1,3,1]$ 中，$2$ 没有出现，$1$ 出现了两次，不符合条件。</p><p>故答案为 $2$ 。</p><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><ul><li>对于 $88%$ 的数据，满足 $1≤n,m≤5000$</li><li>对于 $100%$ 的数据，满足 $1≤n,m≤10^6$</li></ul><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/jo0wmld1.png" alt="img"></p><p>在北京地铁 88 号线上，$\text{Hitori}$ 发现线路图上 $14$ 号线、$7$ 号线、$2$ 号线和 $1$ 号线的颜色依次是粉色、黄色、蓝色、红色，正好对应了她和她的三个朋友。</p><p>只不过为什么粉色要离得比较远呢？</p><p>$Hitori$ 不由得唱起了：</p><blockquote><p>愚昧无知的我唯有放声高歌</p><p>倾诉一切吧 对那星辰</p><p>——《吉他与孤独与蓝色星球》</p></blockquote><details>    <summary>思路</summary>    <p style="color:blue">        滑动区间(考察前后两个指针)，并且同时对元素状态和数量储存判断。这种思想有很多算法都有，比如说KMP算法等，可以将时间复杂度降低到线性。仔细想一下，其实如果单独对每一个区间都去计数，前后两个需要计算的区间有很大一部分是重叠的，也就是说这样会有很大的重复计算——能否通过复用之前的数据成了高效解决问题的一种思路    </p></details><h1 id="I-Hide-an-integer"><a href="#I-Hide-an-integer" class="headerlink" title="I Hide an integer"></a><code>I</code> Hide an integer</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：408&#x2F;452 <code>(90.27%) </code>  正确率：408&#x2F;1179 <code>(34.61%)</code></p><h2 id="题目背景-1"><a href="#题目背景-1" class="headerlink" title="题目背景"></a>题目背景</h2><p>Koishi 想要用平衡五进制加密一封书信，传递给 Kisin Remilia。</p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>所谓平衡五进制，是一种计数方法，在这个计数方法中， 从低到高第 $i$ 位的权重为 $5^i$，而第 $i$ 位只可能是 $−2,−1,0,1,2$ 五种（而非一般五进制中的 $0,1,2,3,4$）。为了表示方便，我们记 $−1$ 为 $A$，$−2$ 为 $B$。</p><p>比如，对于一个平衡五进制数 $1AB$，其值相当于十进制下的 $1×52+(−1)×51+(−2)×50&#x3D;18$。</p><p>具体到书信来说，这封书信一共有 $T$ 个单词，每个单词可以表示为一个自然数 $n$。为了加密这个自然数，Koishi决定用平衡五进制的方式重新书写每个数字。现在给定这个书信的每个原始单词，需要你输出加密后的书信。</p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p>第一行一个正整数 $T\ (1≤T≤105)$，表示书信里的单词总数。</p><p>接下来 $T$ 行，每行一行一个自然数 $n$（$0≤n≤109$），表示书信里的单词。</p><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p>对于每个单词，输出一行一个平衡五进制数，表示该单词加密后的结果。</p><p>需要注意的是，你的输出不应该包含多余的前导零。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs">9<br>72<br>121<br>97<br>99<br>105<br>110<br>116<br>104<br>0<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs maxima">1BA2<br>10A1<br>1AA2<br>1A0A<br>1A10<br>1A20<br><span class="hljs-number">10B1</span><br>1A1A<br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>Koishi：如果想不出如何直接转化，不如先想想如何把一个十进制数转化成一个一般的五进制数，再想想一般五进制和平衡五进制的关系？</p><p>以及，输入本身是 8 个字母。</p><h2 id="THINK"><a href="#THINK" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>注意提示</p></blockquote><h1 id="J-神奇的传送门"><a href="#J-神奇的传送门" class="headerlink" title="J 神奇的传送门"></a><code>J </code>神奇的传送门</h1><p>时间限制：1000ms   内存限制：65536kb</p><p>通过率：186&#x2F;252 (73.81%)    正确率：186&#x2F;713 (26.09%)</p><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>Zeta<br> 和他的朋友们正在探索一组神奇的传送门。经过不懈的探索，他们发现，每穿过一次传送门，自己都会被传送到某个传送门的门前（可能是同一扇门）。</p><p>如果有 $n$个人分别站在 $n$ 扇门前，每当他们同时穿过自己面前的门时，他们就会分别被传送到不同门前，即每扇门前有且仅有一人。</p><p>传送门之间有一定的传递关系，我们可以用一个数列 ${a_n}$ 来表示某一次的传递关系，$a_i$ 表示 $i$ 号 送到 $a_i$ 号门，显然，每一次传送中传送门的传递关系一般是不同的。</p><p>现在有 $n$ 个人分别站在 $n$ 个传送门前，人和传送门的编号均为 $1,2,…,n$ ，起初他们站在自己对应的传送门前，他们会共同穿过 $k+1$ 次自己面前的传送门，已知他们的最终位置，以及从倒数第 $2$ 次传送到第 $1$ 次传送中传送门的传递关系，请你推断出最后一次传送中传送门的传递关系。</p><p><strong>一句话概括</strong>：对于集合 $A&#x3D;{1,2,…,n}$ 存在 $n!$ 种双射（一一映射）$f:A→A$ , 现给出其中 $k+1$ 种映射 $f,f_k,f_{k−1},…,f_2,f_1$ , 求映射$f_{k+1}$ 使得 $f_{k+1}∘f_k∘…∘f_2∘f_1&#x3D;f$ .（其中 ∘ 为映射的复合，例如 $(f1∘f2)(x)&#x3D;f1[f2(x)]$ 。）</p><h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>第一行 1个整数 t 表示数据组数。($1≤t≤50$)</p><p>对于每组数据输入 $k+2$ 行：</p><p>第一行 2 个整数 $n,k$ 含义如题所示。（$1≤n≤2×103,1≤k≤100$）</p><p>第二行 $n$ 个整数，第 i 个数表示第 i 号人最终站在的传送门的编号。</p><p>接下来 k 行，每行 $n$ 个整数，从后往前地给出传送门的传递关系，即第 m 行第 i 个数 $a_i$ 表示在倒数第 m 次传送中，i号门传送到 $a_i$ 号门。</p><h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>输出共 t 行。</p><p>对于每组数据，输出一行 n 个整数，第 i 个数 $a_i$ 表示在最后一次传送中 i 号门传送到 $a_i$ 号门。</p><h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asp">1<br>5 3<br>2 1 3 4 5<br>1 5 3 2 4<br>4 1 3 2 5<br>5 1 2 4 3<br></code></pre></td></tr></table></figure><h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="样例解释-1"><a href="#样例解释-1" class="headerlink" title="样例解释"></a>样例解释</h3><p>起初，$1,2,3,4,5$ 号人分别在 $1,2,3,4,5 $号门前。</p><p>然后，经过输入样例最后一行 <code>5 1 2 4 3</code> 的传送，$1,2,3,4,5$ 号人分别在 $5,1,2,4,3$ 号门前。</p><p>然后，经过 <code>4 1 3 2 5</code> 的传送，处在 $1$ 号门前的 $2$ 号人被传送到 $4$ 号门前，以此类推，$1,2,3,4,5$<br> 号人分别在 $5,4,1,2,3$ 号门前</p><p>然后，经过 <code>1 5 3 2 4</code> 的传送，$1,2,3,4,5$ 号人分别在 $4,2,1,5,3$ 号门前</p><p>最后，经过输出样例 <code>3 1 5 2 4</code> 的传送，处在 $4$ 号门的 $1$ 号人被传送到 $2$ 号门前，以此类推，$1,2,3,4,5$ 号人分别在 $2,1,3,4,5$ 号门前，符合输入样例第三行。</p><h2 id="THINK-1"><a href="#THINK-1" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>函数就是特殊的关系，关系就是有序偶，有序偶可以用矩阵形式表示。所以就按照函数复合来实施矩阵运算就行——难点在于别写错，写错了重写一遍吧，debug可能浪费更多时间</p></blockquote><h1 id="K-L形瓷砖"><a href="#K-L形瓷砖" class="headerlink" title="K L形瓷砖"></a><code>K</code> L形瓷砖</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：47&#x2F;86 <code>(54.65%) </code>  正确率：47&#x2F;301 <code>(15.61%)</code></p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>你是一个装修公司的CEO，今天你接到了一单生意，让你在月球上贴瓷砖，客户给出的价格不菲，并且愿意承担来往的费用，你很心动，但是客户提出了一些要求，你的任务是给出满足客户要求的方案。</p><p>客户主要的要求如下：</p><ul><li><p>只能使用如下的瓷砖（不可旋转）</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/73idfzhr.png" alt="img"></p></li><li><p>要布满一个边长为 $n$ 的正方形区域，除了其中一个用来放置人类月球纪念碑的位置。</p></li></ul><p>方案有多种，输出其中一种即可</p><h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><p>第一行为一个整数 $n$ ，含义如上，保证： $n&#x3D;2^k,0≤k≤10$。</p><p>接下来两个整数，表示人类月球纪念碑的坐标 (从 $0$ 开始，左上角为坐标原点，$x$ 表示行号，$y$ 表示列号)。</p><h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><p>$\frac{n^2-1}{3}$ 行，每行一个字母，三个坐标，表示一块瓷砖，字母表示颜色，坐标是该瓷砖 $3$ 个部分的坐标，按照上图标号的顺序输出。</p><p>如果不存在可行的方案，请输出 <code>None</code> 。</p><p>瓷砖的输出顺序随意。</p><h2 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">g</span> (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>) (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">y</span> (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>) (<span class="hljs-number">1</span>,<span class="hljs-number">0</span>) (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br><span class="hljs-attribute">r</span> (<span class="hljs-number">2</span>,<span class="hljs-number">0</span>) (<span class="hljs-number">3</span>,<span class="hljs-number">0</span>) (<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)<br><span class="hljs-attribute">g</span> (<span class="hljs-number">0</span>,<span class="hljs-number">2</span>) (<span class="hljs-number">0</span>,<span class="hljs-number">3</span>) (<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)<br><span class="hljs-attribute">b</span> (<span class="hljs-number">2</span>,<span class="hljs-number">1</span>) (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) (<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br><span class="hljs-attribute">b</span> (<span class="hljs-number">3</span>,<span class="hljs-number">2</span>) (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) (<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h2 id="样例解释-2"><a href="#样例解释-2" class="headerlink" title="样例解释"></a>样例解释</h2><p>对于样例 11：黑色的圆表示纪念碑</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/1frzev7z.png?x-oss-process=image/resize,m_lfit,h_170,w_225" alt="img"></p><p>对于样例 22：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/z0mzjpyd.png?x-oss-process=image/resize,m_lfit,h_170,w_225" alt="img"></p><p><em>Author: YUKI</em></p><h2 id="THINK-2"><a href="#THINK-2" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>砖人</p><p>注意：自己多画两个图出来观察划分方法——明白整个过程怎么样划分子区域就能很好明白。</p><p>结果是一个 $4*4$ 的递归分治，但是类型比较多，所以要注意代码组织。</p></blockquote><h1 id="L-NEVER-FORGET"><a href="#L-NEVER-FORGET" class="headerlink" title="L NEVER FORGET"></a><code>L</code> NEVER FORGET</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：41&#x2F;135 <code>(30.37%) </code>  正确率：41&#x2F;494 <code>(8.30%)</code></p><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><ul><li>Hitori 发现了 $n$ 个正整数 $a_1,a_2,⋯,a_n$，它们构成了一个<strong>可重</strong>集合 $S$ ，即 $S&#x3D;{a_1,a_2,⋯,a_n}$，且 $∀a_i\in S, 1\le a_i\le n$ 。</li><li>Nijika 取出了 $S$ 的所有非空子集，并告诉你，每个非空子集的价值等于该子集中所有元素的和，即对于 $T⊆S (T\neq \varnothing )$ ，其价值 $V_T&#x3D;\sum_{a_x\in T}a_x$ 。</li><li>$\text{Ryo}$ 将 $S$ 所有非空子集的价值从小到大排序，排序后的价值构成了序列 $w_1,w_2,⋯,w_{2^n−1}$ 。</li><li>$\text{Ikuyo}$ 想问你，$w_{2^n-1}$ 等于多少？</li></ul><h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><p>输入包括两行</p><p>第一行包括一个正整数 $n$</p><p>第二行包括 $n$ 个正整数 $a_1,a_2,⋯,a_n$</p><h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><p>输出包括一行</p><p>第一行包括一个正整数 $w_{2^n -1}$</p><h2 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h2 id="样例解释-3"><a href="#样例解释-3" class="headerlink" title="样例解释"></a>样例解释</h2><p>$S$ 的所有非空子集分别为 ${2},{1},{2},{2,1},{2,2},{1,2},{2,1,2}$ 。</p><p>价值分别为 $2,1,2,3,4,3,5$ 。</p><p>从小到大排序后为 $1,2,2,3,3,4,5$ 。</p><p>故 $w_{2^n -1}&#x3D;w_4&#x3D;3$ 。</p><h2 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h2><ul><li>对于 $50%$ 的数据， $1≤n≤16$</li><li>对于 $70%$ 的数据， $1≤n≤200$</li><li>对于 $100%$ 的数据， $1≤n≤500, 1≤a_i≤n$</li></ul><h2 id="题目背景-续"><a href="#题目背景-续" class="headerlink" title="题目背景 - 续"></a>题目背景 - 续</h2><blockquote><p>等着你的我</p><p>我在等着你</p><p>连无尽的明天</p><p>都能够穿过</p><p>停下脚步 回头看</p><p>叹息着无休止的今天</p><p>永远这种事 记忆什么的</p><p>明知道这些都是留存不下来的</p><p>我还是为此苦恼挠头</p><p>在心的角落里哭泣</p><p>想要请你记住那些</p><p>在高架桥下渡过的美好时光</p><p>我依然在后悔 有话没能说出口</p><p>落荒而逃的那天</p><p>我们手牵手</p><p>曾经那些难舍难分的感情</p><p>这就是我的一切了</p><p>但是连这些 现在都失去了</p><p>时过境迁 物是人非</p><p>明知道世事无常</p><p>我却依然苦恼地直挠头</p><p>悔恨着有话说不出口的今天</p><p>想要请你记住那些</p><p>在高架桥下渡过的美好时光</p><p>我依然在后悔 有话没能说出口 落荒而逃的那天</p><p>等着你的我</p><p>我在等着你</p><p>连无尽的明天都能够穿过</p><p>我今天也依然苦恼地挠头</p><p>一直在黯然伤心</p><p>我非你莫属</p><p>——《Re:Re:》</p></blockquote><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/enegti4a.png" alt="img"></p><details>    <summary>思路</summary>    这题真不会，别人的思路是一个$n^3$的dp和一个前缀和与二分——但是没听懂。还有一个思路是幂集的和是对称的，这样就可以缩小枚举区间，找出答案了</details><h1 id="M-好想变得和你一样强！！！"><a href="#M-好想变得和你一样强！！！" class="headerlink" title="M 好想变得和你一样强！！！"></a><code>M</code> 好想变得和你一样强！！！</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：97&#x2F;172 <code>(56.40%) </code>  正确率：97&#x2F;488 <code>(19.88%)</code></p><h2 id="题目背景-2"><a href="#题目背景-2" class="headerlink" title="题目背景"></a>题目背景</h2><blockquote><p>所以，海的那边是什么？</p></blockquote><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>曾经，有一位强者名叫 Alice ，$\text{\text{Chtholly}}$ 想变得和她一样强</p><p>但是 $\text{\text{Chtholly}}$ 现在还无法做到，她只能摆弄手中的 $n$ 个整数 $a_1,a_2,⋯,a_n$</p><p>$\text{\text{Chtholly}}$ 可以进行若干次操作，每次操作可以从 $n$ 个整数中任意选择一个数 $ai$ ，将它加 1 或减 1</p><p>一个整数序列被称为“好序列”，当且仅当其单调递增，且相邻两数的差值为 11</p><p>如 $[2,3,4]$ 和 [9,10,11,12][9,10,11,12] 是“好序列”，而 [1,1,4,5][1,1,4,5] 和 [1,3,4][1,3,4] 不是“好序列”</p><p>$\text{\text{Chtholly}}$ 想知道，最少通过多少次操作，可以将序列 $a_1,a_2,⋯,a_n$ 变为“好序列”</p><h2 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h2><p>输入包括两行</p><p>第一行包括一个整数 $n$</p><p>第二行包括 $n$ 个整数，$a_1,a_2,⋯,a_n$</p><h2 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h2><p>输出包括一行</p><p>第一行包括一个整数，表示最少的操作次数</p><h2 id="输入样例-1-1"><a href="#输入样例-1-1" class="headerlink" title="输入样例 1"></a>输入样例 1</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-1-1"><a href="#输出样例-1-1" class="headerlink" title="输出样例 1"></a>输出样例 1</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">11<br></code></pre></td></tr></table></figure><h2 id="输入样例-2-1"><a href="#输入样例-2-1" class="headerlink" title="输入样例 2"></a>输入样例 2</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">9</span> <span class="hljs-number">1</span> <span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-2-1"><a href="#输出样例-2-1" class="headerlink" title="输出样例 2"></a>输出样例 2</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">29<br></code></pre></td></tr></table></figure><h2 id="样例解释-4"><a href="#样例解释-4" class="headerlink" title="样例解释"></a>样例解释</h2><p>对于样例 1 ，最优解之一是使序列变为 [2,3,4,5][2,3,4,5]</p><h2 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h2><ul><li>对于 $50%$ 的数据，$1≤n≤103$</li><li>对于 $100%$ 的数据，$1≤n≤105,0≤a_i≤109$</li></ul><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>本题可能需要用到<strong>排序算法</strong> ，以下代码可以实现对数组的高效排序（从小到大），平均时间复杂度为 $O(n\log 2n)$，可供参考</p><p>（课堂上没有讲解排序之前可以先不懂原理，能够把以下代码合理地嵌入进自己的程序之中来实现排序即可）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span> <span class="hljs-comment">//头文件需要添加 stdlib.h</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *p1, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *p2)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (*((<span class="hljs-type">int</span>*)p1) &lt;= *((<span class="hljs-type">int</span>*)p2))<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;; <span class="hljs-comment">//此处元素下标从 0 开始</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-number">8</span>; <span class="hljs-comment">// n 为数组中的元素个数</span><br><span class="hljs-built_in">qsort</span>(a, n, <span class="hljs-built_in">sizeof</span>(a[<span class="hljs-number">0</span>]), cmp); <span class="hljs-comment">// 排序</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>本题可能需要用到 <code>long long</code> ，请留意</p><h2 id="题目背景-续-1"><a href="#题目背景-续-1" class="headerlink" title="题目背景 - 续"></a>题目背景 - 续</h2><blockquote><p>屏幕在深夜微微发亮</p><p>思想在那虚树路径上彷徨</p><p>平面的向量交错生长</p><p>织成 忧伤的网</p><p>剪枝剪去我们的疯狂</p><p>SPFA告诉我前途在何方</p><p>01背包装下了忧伤</p><p>笑颜 洋溢脸庞</p><p>键盘微凉 鼠标微凉</p><p>指尖流淌 代码千行</p><p>凸包周长 直径多长</p><p>一进考场 全都忘光</p><p>你在OJ上提交了千百遍</p><p>却依然不能卡进那时限</p><p>双手敲尽代码也敲尽岁月</p><p>只有我一人 写的题解</p><p>凋零在OJ里面</p><p>tarjan陪伴强联通分量</p><p>生成树完成后思路才闪光</p><p>欧拉跑过的七桥古塘</p><p>让你 心驰神往</p><p>队列进出图上的方向</p><p>线段树区间修改求出总量</p><p>可持久留下的迹象</p><p>我们 俯身欣赏</p><p>数论算法 图论算法</p><p>高斯费马 树上开花</p><p>线性规划 动态规划</p><p>时间爆炸 如何优化</p><p>我在OI中辗转了千百天</p><p>却不让我看AK最后一眼</p><p>我用空间换回超限的时间</p><p>随重新编译 测完样例</p><p>才发现漏洞满篇</p><p>原来CE 是因选错语言</p><p>其实爆0 只因忘写文件</p><p>如果标算太难请坚定信念</p><p>不如回头再看一眼题面</p><p>以那暴力模拟向正解吊唁</p><p>蒟蒻的蜕变 神犇出现</p><p>终将与Au擦肩</p><p>屏幕在深夜微微发亮</p><p>我心在考场</p><p>—— Menci&#x2F;24OI 《膜你抄》</p></blockquote><h2 id="THINK-3"><a href="#THINK-3" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>假设最终所得的序列为$k,k+1,…,k+n-1$,则目的可以转化成求函数$f(k)&#x3D;\sum_{i&#x3D;0}^{n-1}|k+i-a_i|&#x3D;\sum_{i&#x3D;0}^{n-1}|k-(a_i-i)|$ 的最小值，这是一个一维绝对值函数，中学数学告诉你最值点在序列 $a_i-i$ 的中位数上，所以先排序，然后求中位数，最后计算答案即可</p></blockquote><h1 id="N-世界上最幸福的女孩"><a href="#N-世界上最幸福的女孩" class="headerlink" title="N 世界上最幸福的女孩"></a><code>N</code> 世界上最幸福的女孩</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：279&#x2F;366 <code>(76.23%) </code>  正确率：279&#x2F;1368 <code>(20.39%)</code></p><h2 id="题目背景-3"><a href="#题目背景-3" class="headerlink" title="题目背景"></a>题目背景</h2><blockquote><p>所以，我敢肯定……现在的我……不管别人怎么说，一定是世界上最幸福的女孩。</p><p>$\mathbf{Chtholly⋅Nota⋅Seniorious}$</p></blockquote><h2 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h2><p>$\text{Chtholly}$ 收到了一份生日礼物</p><p>生日礼物里有 $n$ 个整数 $x_1,x_2,⋯,x_n$，$\text{Chtholly}$ 可以随意指定每一个整数的数值，但是要满足：对于任意的 $1≤i≤n$ ，都有 $1≤x_i≤m$，且 $x_i$ <strong>互不相等</strong></p><p>$\text{Chtholly}$ 不喜欢三角形，所以她不希望这 $n$ 个整数中存在三个数，可以作为同一个三角形三条边的边长，即：不存在$ x_i,x_j,x_k$（$1≤i,j,k≤n$, 且 $i,j,k$ 互不相等），满足 $x_i+x_j&gt;x_k$</p><p>$\text{Chtholly}$ 想知道，是否存在一种对于 $x_1,x_2,⋯,x_n$ 的数值指定方案，满足：对于其中的任意三个数，都不能作为同一个三角形三条边的边长</p><h2 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h2><p>输入包含<strong>多组数据</strong></p><p>第一行包含一个整数 $T$ ，表示数据组数</p><p>接下来 $T$ 行，每一行包含两个整数 $n,m$ ，表示一组数据</p><h2 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h2><p>对于每组数据，输出一行</p><p>若存在满足条件的方案，则输出 <code>YE5</code>，否则输出 <code>N0</code></p><h2 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">114 </span><span class="hljs-number">514</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">16454536251 </span><span class="hljs-number">1145141919810</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-symbol">N0</span><br>YE<span class="hljs-number">5</span><br><span class="hljs-symbol">N0</span><br>YE<span class="hljs-number">5</span><br><span class="hljs-symbol">N0</span><br>YE<span class="hljs-number">5</span><br><span class="hljs-symbol">N0</span><br></code></pre></td></tr></table></figure><h2 id="样例解释-5"><a href="#样例解释-5" class="headerlink" title="样例解释"></a>样例解释</h2><ul><li>当 $n&#x3D;4,m&#x3D;7$ 时，可以使 4 个整数分别为 $1,2,4,7$ ，满足要求</li><li>当 $n&#x3D;3,m&#x3D;3$ 时，可以使 3 个整数分别为 $1,2,3$ ，满足要求</li><li>当$ n&#x3D;1,m&#x3D;1$ 时，显然满足要求</li></ul><h2 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h2><ul><li>对于 $100%$ 的数据，满足 $1≤T≤10^5,1≤n≤10^{18},1≤m≤10^{18}$</li></ul><h2 id="题目背景-续-2"><a href="#题目背景-续-2" class="headerlink" title="题目背景 - 续"></a>题目背景 - 续</h2><blockquote><p>I once swore to be with him forever, I once swore to be with him forever, </p><p>and being able to make such a vow made me incredibly ha$p$y.and being able to make such a vow made me incredibly ha$p$y.</p><p>I once swore to be with her forever,I once swore to be with her forever,</p><p>and being able to make such a vow made me incredibly peaceful.and being able to make such a vow made me incredibly peaceful.</p><p>Having such feelings makes me incredibly ha$p$y.Having such feelings makes me incredibly ha$p$y.</p><p>Having such feelings makes me incredibly joyful.Having such feelings makes me incredibly joyful.</p><p>He once said to me: I will definitely make you ha$p$y.He once said to me: I will definitely make you ha$p$y.</p><p>I once said to her: I will definitely make you ha$p$y.I once said to her: I will definitely make you ha$p$y.</p><p>Hearing him say that made me incredibly ha$p$y.Hearing him say that made me incredibly ha$p$y.</p><p>Being able to say that to her made me incredibly satisfied.Being able to say that to her made me incredibly satisfied.</p><p>He shared so much ha$p$iness with me.He shared so much ha$p$iness with me.</p><p>I received so much from her, but I…I received so much from her, but I…</p><p>So for sure, I am the ha$p$iest girl in the world right now,So for sure, I am the ha$p$iest girl in the world right now,</p><p>no matter what others say.</p></blockquote><h2 id="THINK-4"><a href="#THINK-4" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>问题限制条件就是一个隐藏的 斐波那切数列</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>I 💖 [PUAA]</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Summary for 2024-10-08</title>
    <link href="/2024/10/06/Summary0/"/>
    <url>/2024/10/06/Summary0/</url>
    
    <content type="html"><![CDATA[<center>    <h1>        Special - 2024国庆思维训练特别赛    </h1></center><blockquote><p>浪费了国庆几天时间，不会做的还是不会做，不得不说 $\mathbf{PUAA}$ 的出题有水平，新人中也不缺乏高手。</p></blockquote><p><code>22 for 7 days</code></p><blockquote><p>本文如果侵害了你的版权，请及时联系删除，谢谢。</p></blockquote><h1 id="A-石头-剪刀-布"><a href="#A-石头-剪刀-布" class="headerlink" title="A 石头 剪刀 布"></a><code>A</code> 石头 剪刀 布</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有三个玩家 <code>A</code>、<code>B</code>、<code>C</code> 玩剪刀石头布游戏。游戏规则如下：</p><ul><li>每位玩家出拳只能是“剪刀”、“石头”或“布”中的一个。</li><li>如果三位玩家出拳都不相同或都相同，则没有玩家获胜。</li><li>如果场上只出了 “剪刀” 和 “石头” ，则出“石头”的玩家获胜。</li><li>如果场上只出了 “剪刀” 和 “布” ，则出“剪刀”的玩家获胜。</li><li>如果场上只出了 “布” 和 “石头” ，则出“布”的玩家获胜。</li><li>每局的获胜玩家均获得 1 分</li></ul><p>你作为游戏裁判，需要编写一个程序来确定每位玩家 m 轮游戏后的得分情况。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>共 m+1 行。</p><p>第一行，一个正整数 m，表示 m 轮游戏。保证 $1≤m≤100$</p><p>接下来 m 行，每行三个空格隔开的整数 a 、b 、c ，分别表示玩家 A、B、C 的出拳。保证 $a,b,c∈0,1,2$ 分别表示剪刀、石头、布。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>共 1 行，共三个非负整数，分别表示玩家 A、B、C 的得分。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="THINK"><a href="#THINK" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>模拟即可</p></blockquote><h1 id="B-验证身份证号"><a href="#B-验证身份证号" class="headerlink" title="B 验证身份证号"></a><code>B</code> 验证身份证号</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：1072&#x2F;1217 <code>(88.09%) </code>  正确率：1072&#x2F;3600 <code>(29.78%)</code></p><h2 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h2><p>中华人民共和国公民的身份证号码由 18 位数字或 X 组成，其中最后一位可能是 X。</p><p>身份证号码的前 66 位表示行政区划代码，第 7 位到第 14 位表示出生日期，第 15 位到第 17 位表示顺序码，第 18 位表示校验码。</p><p>现给定若干个身份证号，请检验身份证号是否合法。如果合法，输出 <code>YES</code>，否则输出 <code>NO</code>。</p><p>保证前 17 位数字合法，因此你只需要检验第 18 位校验码是否合法即可。</p><p>校验码的计算方法如下：</p><ul><li>将前面的身份证号码 17 位数分别乘以不同的系数。从第 1 位到第 17 位的系数分别为$7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2$。</li><li>将这 17 位数字和系数相乘的结果相加。</li><li>用加出来的和除以 11，看余数是多少。</li><li>余数只可能有 $0,1,2,3,4,5,6,7,8,9,10$ 这 11 个数字。其分别对应的最后一位身份证的号码为 $1,0,X,9,8,7,6,5,4,3,2$ 。(即余数 0 对应 1 ，余数 1 对应 0 ，余数 2 对应 $X$ …)</li></ul><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>共 n+1 行。</p><p>第一行一个正整数 n ，保证 $1≤n≤50$ 。</p><p>接下来 n 行，每一行为一个身份证号。（若最后一位为 $X$，则为大写字母 <code>X</code>）</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出 n 行。</p><p>每行表示身份证号码是否合法。如果合法，输出 <code>YES</code>，否则输出 <code>NO</code>。</p><h2 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">2<br>371311200312247819<br>130631197601191234<br></code></pre></td></tr></table></figure><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">YES</span><br><span class="hljs-keyword">NO</span><br></code></pre></td></tr></table></figure><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>在计算系数相乘结果之和时，除了直接写出表达式以外，我们也可以采用 “数组+循环” 的方式。</p><p>假设需要计算 $3×5+9×7+4×93×5+9×7+4×9$</p><p>我们可以直接写 <code>sum = 3*5+9*7+4*9;</code></p><p>同时，我们也可以写成</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">int</span> a[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-built_in">int</span> b[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>&#125;;<br><span class="hljs-built_in">int</span> <span class="hljs-keyword">sum</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) <br>&#123;<br>   <span class="hljs-keyword">sum</span> += (a[i] * b[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>看似代码量变大了，但如果需要计算 17 个系数相乘结果之和时，“数组+循环”的方法或许会更便捷且不易出错。</p><h1 id="C-nbnhhsh？"><a href="#C-nbnhhsh？" class="headerlink" title="C nbnhhsh？"></a><code>C</code> nbnhhsh？</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：876&#x2F;973 <code>(90.03%) </code>  正确率：876&#x2F;2450 <code>(35.76%)</code></p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>qjsywcyycxsjzj。</p><p>看得懂吗？看不懂就对了。上面这句话的意思是，“奇迹是一位C语言程序设计助教”。</p><p>由于语言能力本当苦手，奇迹对汉语拼音首字母缩写理解不能。为了训练，他想通过英文句子缩写入手，你能帮他编写一个程序，自动生成缩写吗？</p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p>一行一个字符串$s$，由若干英文单词、空格、标点符号组成。</p><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p>对于每组数据，输出一行，缩写后的句子。若单词中出现了单引号，认为是一个单词。</p><p>缩写规则：连续的英文字母或单引号认为是一个单词，输出该单词的第一个字母，区分大小写（特别地，数据保证一个单词不会以单引号开头）；其他标点符号原样输出；空格省去。</p><h2 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-keyword">Man</span>, What can I <span class="hljs-keyword">say</span>? Mamba out!<br></code></pre></td></tr></table></figure><h2 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h2><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">M,WcIs?Mo!<br></code></pre></td></tr></table></figure><h2 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h2><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">BanG Dream! It&#x27;s MyGO!!!<br></code></pre></td></tr></table></figure><h2 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h2><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">BD!IM!!!<br></code></pre></td></tr></table></figure><h2 id="Not-hint"><a href="#Not-hint" class="headerlink" title="Not hint"></a>Not hint</h2><p>本题的题目全拼为“能不能好好说话”</p><h2 id="THINK-1"><a href="#THINK-1" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>空格分词，处理首尾字符</p></blockquote><h1 id="D-tux-的飞行编队安排-Hard-Version"><a href="#D-tux-的飞行编队安排-Hard-Version" class="headerlink" title="D tux 的飞行编队安排 (Hard Version)"></a><code>D</code> tux 的飞行编队安排 (Hard Version)</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：739&#x2F;797 <code>(92.72%) </code>  正确率：739&#x2F;1247 <code>(59.26%)</code></p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>今年是国庆 75 周年，tux 想安排一场飞行表演来庆祝国庆。为了让表演更加壮观，参与表演的飞机数量要尽可能多，但是 tux 最多只能使用 $n$ 架飞机（可以使用小于等于 $n$ 架）。编队必须严格排列成如下格式的 “75” 形状（星号代表飞机）：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">****</span>    <span class="hljs-strong">****</span><br><span class="hljs-bullet">   *</span>    *<br><span class="hljs-bullet">   *</span>    *<br><span class="hljs-bullet">  *</span>     <span class="hljs-strong">****</span><br><span class="hljs-bullet">  *</span>        *<br><span class="hljs-bullet"> *</span>         *<br><span class="hljs-bullet"> *</span>      <span class="hljs-strong">****</span><br></code></pre></td></tr></table></figure><p><strong>图形解释</strong>：设图形中 “7” 和 “5” 的横向宽度为 $k$（$k≥3$，图中为 4），则 “7” 的纵向高度为 $2k−1$，“7” 的竖线略有倾斜，斜率为 2 。“5” 共有三条横线，相邻的横线之间有 $k−2$ 行。“7” 和 “5” 之间用 $k$ 个空格隔开，“7” 左侧没有空格，上方没有空行。</p><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><p>一个数，表示 tux 最多能使用 $n$ 架飞机，$18≤n≤4000$.</p><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><p>若干行字符，表示在使用不超过 $n$ 架飞机的条件下可以形成的最大编队安排。飞机用星号<code>*</code>表示。</p><h2 id="输入样例1-1"><a href="#输入样例1-1" class="headerlink" title="输入样例1"></a>输入样例1</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">42<br></code></pre></td></tr></table></figure><h2 id="输出样例1-1"><a href="#输出样例1-1" class="headerlink" title="输出样例1"></a>输出样例1</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">****</span>**      <span class="hljs-strong">****</span>**<br><span class="hljs-bullet">     *</span>      *<br><span class="hljs-bullet">     *</span>      *<br><span class="hljs-bullet">    *</span>       *<br><span class="hljs-bullet">    *</span>       *<br><span class="hljs-bullet">   *</span>        <span class="hljs-strong">****</span>**<br><span class="hljs-bullet">   *</span>             *<br><span class="hljs-bullet">  *</span>              *<br><span class="hljs-bullet">  *</span>              *<br><span class="hljs-bullet"> *</span>               *<br><span class="hljs-bullet"> *</span>          <span class="hljs-strong">****</span><span class="hljs-strong">**</span><br></code></pre></td></tr></table></figure><h2 id="样例解释1"><a href="#样例解释1" class="headerlink" title="样例解释1"></a>样例解释1</h2><p>$k&#x3D;6$，全部 $42$ 架飞机均参与表演。</p><h2 id="输入样例2-1"><a href="#输入样例2-1" class="headerlink" title="输入样例2"></a>输入样例2</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">25<br></code></pre></td></tr></table></figure><h2 id="输出样例2-1"><a href="#输出样例2-1" class="headerlink" title="输出样例2"></a>输出样例2</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">***   ***</span><br><span class="hljs-comment">  *   *</span><br><span class="hljs-comment">  *   ***</span><br><span class="hljs-comment"> *      *</span><br><span class="hljs-comment"> *    ***</span><br></code></pre></td></tr></table></figure><h2 id="样例解释2"><a href="#样例解释2" class="headerlink" title="样例解释2"></a>样例解释2</h2><p>排成 $k&#x3D;3$ 的编队至少需要 $18$ 架飞机，排成 $k&#x3D;4$ 的编队至少需要 $26$ 架飞机。现有 $25$ 架飞机，最多只够满足 $k&#x3D;3$ 的编队。</p><h2 id="Hint-1"><a href="#Hint-1" class="headerlink" title="Hint"></a>Hint</h2><p>试着用 $k$ 表示编队飞机的数目，寻找 $n$ 和 $k$ 的关系。</p><h2 id="THINK-2"><a href="#THINK-2" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>诚如Hint，用<code>k</code>表示编队飞机的数目，寻找<code>n</code>和<code>k</code>的关系。多用几个<code>if</code>就行了。</p></blockquote><h1 id="E-拾贝"><a href="#E-拾贝" class="headerlink" title="E 拾贝"></a><code>E</code> 拾贝</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：803&#x2F;916 <code>(87.66%) </code>  正确率：803&#x2F;2797 <code>(28.71%)</code></p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>ZetaZeta 突然穿越到了原始社会！他发现，那里的人们以收集贝壳为荣，收集贝壳数量多的人可以称王。他们当中有 $n$ 个人收集的贝壳较多，但不尽相同，于是他们决定，这 $n$ 个人首先排好出场顺序，第一天让第一个出场的人称王，之后的 $n−1$ 天，按顺序出一个人与前一天的王比较贝壳的数量，如果那个人贝壳的数量大于前一天的王的贝壳数量，则取而代之。ZetaZeta 想知道，第 $k$ 天谁在称王。</p><h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><p>第一行 22 个整数$n,t$ ，表示总人数和询问次数。$(1≤n≤2×105，1≤t≤2×105)$</p><p>第二行 $n$ 个整数，第 $i$ 个数表示第 $i$ 个出场的人收集到的贝壳的数量 $a_i$ 。$(1≤i≤n,1≤a_i≤109)$</p><p>接下来 $t$ 行，每行 1 个整数 $k$ ，询问：在第 $k$ 天是第几个出场的人在称王。$(1≤k≤n)$</p><h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><p>输出 $t$ 行，每行 $1$ 个整数，表示第几个出场的人在称王。</p><h2 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">9</span><br><span class="hljs-symbol">11 </span><span class="hljs-number">12</span> <span class="hljs-number">12</span> <span class="hljs-number">12</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">23</span> <span class="hljs-number">128</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><span class="hljs-number">6</span><br><span class="hljs-number">7</span><br><span class="hljs-number">8</span><br><span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h2 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br>2<br>2<br>2<br>2<br>7<br>8<br>8<br></code></pre></td></tr></table></figure><h2 id="Hint-2"><a href="#Hint-2" class="headerlink" title="Hint"></a>Hint</h2><p>仔细观察给的样例，有没有想到什么呢~</p><h2 id="THINK-3"><a href="#THINK-3" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>前 $k$ 天最大值</p></blockquote><h1 id="F-生日悖论"><a href="#F-生日悖论" class="headerlink" title="F 生日悖论"></a><code>F</code> 生日悖论</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：949&#x2F;986 <code>(96.25%) </code>  正确率：949&#x2F;1738 <code>(54.60%)</code></p><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>一个班级有 $n$ 人。请问，班级所有人的生日都互不相同的概率为多少？</p><p>一年有 $365$ 天（不考虑闰年），假设每个人的生日互相独立且在这 $365$ 天里等概率分布的。</p><h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><p>第一行一个正整数 $t$ 代表数据组数，$1≤t≤365$</p><p>接下来 $t$ 行，每行一个正整数 $n$，$1≤n≤365$</p><h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><p>对于每组数据，输出一行一个浮点数，代表班级所有人的生日都互不相同的概率，保留 $6$ 位小数输出。</p><h2 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">5<br>10<br>30<br>90<br>1<br>365<br></code></pre></td></tr></table></figure><h2 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>.<span class="hljs-number">883052</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">293684</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">000006</span><br><span class="hljs-attribute">1</span>.<span class="hljs-number">000000</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">000000</span><br></code></pre></td></tr></table></figure><h1 id="G-奇迹！下雪啦！"><a href="#G-奇迹！下雪啦！" class="headerlink" title="G 奇迹！下雪啦！"></a><code>G</code> 奇迹！下雪啦！</h1><p>时间限制：1000ms  内存限制：65536kb</p><p>通过率：337&#x2F;381 <code>(88.45%) </code>  正确率：337&#x2F;637 <code>(52.90%)</code></p><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>奇迹出生在遥远的南方！在来北方上学之前，奇迹从来没见过雪，第一次看到下雪的时候，他想体验一下滚雪球。首先在手上捏一个小小的核心，然后在地上越滚越大。每秒钟雪球都会向前（顺时针）滚 $1&#x2F;4$ 圈，奇迹想知道第 $x$ 秒钟雪球有多大？</p><h2 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h2><p>1行1个正整数 $x$，保证 $x≤100$.</p><h2 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h2><p>一个 $⌊1+x2⌋×⌊1+x−12⌋$ 阶的矩阵，代表第 $x$ 秒钟雪球的样子。</p><h2 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><h2 id="输出样例-4"><a href="#输出样例-4" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">5</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h2><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs tap">在第一秒钟，雪球的样子是<br>1<br>第2至5秒，雪球的样子分别是<br>1<br>2<br><br>2 1<br>3 3<br><br>3 2<br>3 1<br>4 4<br><br>4<span class="hljs-number"> 3 </span>3<br>4<span class="hljs-number"> 1 </span>2<br>5<span class="hljs-number"> 5 </span>5<br></code></pre></td></tr></table></figure><h2 id="THINK-4"><a href="#THINK-4" class="headerlink" title="THINK"></a>THINK</h2><blockquote><p>不知道是否能降低时间复杂度。这里提供的思路是先构造一个二维数组，然后模拟逆向过程，一圈一圈往回打表，逐渐收缩到核心。最后输出。时间复杂度为 $O(n^2)$.空间复杂度 $O(n^2)$<br>模拟过程让我想到了矢量绘图</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>I 💖 [PUAA]</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/06/hello-world/"/>
    <url>/2024/10/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><hr><h1 id="优雅的写文章"><a href="#优雅的写文章" class="headerlink" title="优雅的写文章"></a>优雅的写文章</h1><p>Fluid 是一款很十分优雅的主题，那么写一篇优雅的文章搭配它呢？以下会从几个方面来简述，主要还是做几个推荐。</p><h2 id="熟悉-Markdown-语法"><a href="#熟悉-Markdown-语法" class="headerlink" title="熟悉 Markdown 语法"></a>熟悉 Markdown 语法</h2><p>对于使用 Hexo 的大多数人来说，相信对 Markdown 的语法不会陌生。熟练掌握 Markdown 语法对我们的写作拥有极大的帮助，这里用少用的表格和脚注来举个例子。至于为什么有些公式、流程图无法渲染，是因为 Markdown 追求简洁式写作，默认渲染器不支持复杂渲染。</p><p>表格<br>站点地址介绍<br>Fluid Docs<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a>Fluid 官方文档<br>Hexo-theme-fluid<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a>Fluid Github Repo<br>Fluid Blog<a href="https://hexo.fluid-dev.com/">https://hexo.fluid-dev.com/</a>Fluid 官方博客</p><table><thead><tr><th>站点</th><th align="center">地址</th><th align="right">介绍</th></tr></thead><tbody><tr><td>Fluid Docs</td><td align="center"><a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></td><td align="right">Fluid 官方文档</td></tr><tr><td>Hexo-theme-fluid</td><td align="center"><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></td><td align="right">Fluid Github Repo</td></tr><tr><td>Fluid Blog</td><td align="center"><a href="https://hexo.fluid-dev.com/">https://hexo.fluid-dev.com/</a></td><td align="right">Fluid 官方博客</td></tr></tbody></table><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>默认渲染器下正常显示，不同渲染器显示效果不同，写法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">脚注演示[^1]<br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">脚注内容演示</span><br></code></pre></td></tr></table></figure><p>脚注演示<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote">&lt;span class&#x3D;”hint–top hint–rounded” aria-label&#x3D;”脚注内容演示</p><h2 id="善用-HTML"><a href="#善用-HTML" class="headerlink" title="善用 HTML"></a>善用 HTML</h2><p>我们可以在 Markdown 中插入一些简单的 HTML 代码或 CSS 片段来获得更多扩展，使得文章内容更具有多样性。以下演示几个简单功能。”&gt;[1]</span></a></sup></p><p>跳转位置演示（跳转位置设置点）</p><h3 id="文字颜色"><a href="#文字颜色" class="headerlink" title="文字颜色"></a>文字颜色</h3><p>#519D9E颜色演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #519D9E; &quot;</span>&gt;</span>#519D9E颜色演示<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span  style="color: #519D9E; ">#519D9E颜色演示</span></p><h3 id="文字大小"><a href="#文字大小" class="headerlink" title="文字大小"></a>文字大小</h3><p>0.7em 文字大小演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:0.7em;&quot;</span>&gt;</span>0.7em 文字大小演示<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span  style="font-size:0.7em;">0.7em 文字大小演示</span></p><h3 id="文字位置"><a href="#文字位置" class="headerlink" title="文字位置"></a>文字位置</h3><p>内容居中演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center&quot;</span>&gt;</span>内容居中演示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> # 可以修改 text-align 参数来设置文字位置。<br></code></pre></td></tr></table></figure><p style="text-align:center">内容居中演示</p>页内跳转点击到达跳转位置演示<p><a href="#demo">点击到达跳转位置演示</a> # 在需要跳转的地方添加此代码。<br><a id="demo">跳转位置演示（跳转位置设置点）</a> # 在跳转位置添加次代码。</p><h3 id="综合演示"><a href="#综合演示" class="headerlink" title="综合演示"></a>综合演示</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;&quot;</span>&gt;</span><br>综合演示<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>优雅使用 Fluid 写文章<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p style="text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;">综合演示<br>优雅使用 Fluid 写文章</p><p>iframe 页面镶套<br>iframe 页面镶套可以帮助我们更好的展示一个页面。比如以下演示页面。</p><iframe src="https://fluid-dev.github.io/hexo-fluid-docs/" width="100%" height="500" name="topFrame" scrolling="yes"  noresize="noresize" frameborder="0" id="topFrame"></iframe><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://hexo.fluid-dev.com/&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;topFrame&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;yes&quot;</span>  <span class="hljs-attr">noresize</span>=<span class="hljs-string">&quot;noresize&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;topFrame&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一些参数说明，width&#x3D;”100%” 为宽度自适应，高度请根据实际需求跳转，注意移动端页面是否匹配。 scrolling 为滚动条参数。frameborder 为边框参数。noresize 属性规定用户无法调整框架的大小。</p><h3 id="details-标签"><a href="#details-标签" class="headerlink" title="details 标签"></a>details 标签</h3><p>用于展示代码较多需要折叠或折叠相关内容，以下为演示，summary 填写显示名称。</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><details><summary>Demo</summary><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Map <span class="hljs-keyword">struct</span> &#123;<br>  mu Mutex<br>  read atomic.Value<br>  dirty <span class="hljs-keyword">map</span>[<span class="hljs-keyword">interface</span>&#123;&#125;]*entry<br>  misses <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure></details>对应的实现代码：<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;details&gt;<br>&lt;summary&gt;Demo&lt;/summary&gt;<br>```go<br>type Map struct &#123;<br>  mu Mutex<br>  read atomic.Value<br>  dirty map[interface&#123;&#125;]*entry<br>  misses int<br>&#125;<br>\```<br>&lt;/details&gt;<br></code></pre></td></tr></table></figure>善用 Tag 组件Fluid 内置了许多 Tag 组件，包含便签、行内标签（已知不会出现间隔，谨慎使用）、勾选框、按钮和组图，可以使用这些组件来丰富文章内容，具体点击查看官方文档查看，点击跳转到 Fluid Doc。<p>配图<br>众所周知，博客好不好看，配图占一半。这里给大家推荐几个我常用找配图的地方。另外，请遵循相关网站的版权协议。</p><p>Wallpaper Hub</p><p>Wallhaven</p><p>Unsplash</p><p>更多技巧，上网自行搜索。例如查阅官方 <a href="https://hexo.io/zh-cn/docs/github-pages">Wiki</a> 或是 <a href="https://pengtech.net/hexo/blog_seo_optimize.html?t=1728336063352">博客经验</a> <a href="https://hexo.fluid-dev.com/archives/">STFM</a></p><blockquote><p>又多互联网上的垃圾<section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>脚注内容演示</p></blockquote><h2 id="善用-HTML"><a href="#善用-HTML" class="headerlink" title="善用 HTML"></a>善用 HTML</h2>我们可以在 Markdown 中插入一些简单的 HTML 代码或 CSS 片段来获得更多扩展，使得文章内容更具有多样性。以下演示几个简单功能。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
